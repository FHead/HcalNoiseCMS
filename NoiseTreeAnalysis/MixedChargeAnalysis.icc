#include <cmath>
#include <cstring>
#include <iostream>
#include <algorithm>

#include "AutoH1D.h"
#include "AutoH2D.h"
#include "AutoH3D.h"
#include "AutoNtuple.h"

#include "CycledH1D.h"
#include "CycledH2D.h"
#include "CycledH3D.h"
#include "CycledNtuple.h"

#include "Functors.h"
#include "time_stamp.h"

#include "geners/BinaryFileArchive.hh"
#include "geners/GenericIO.hh"

#include "npstat/rng/MersenneTwister.hh"
#include "npstat/stat/ArchivedNtuple.hh"


template <class Options, class RootMadeClass>
MixedChargeAnalysis<Options,RootMadeClass>::MixedChargeAnalysis(
    TTree *tree, const std::string& outputfile,
    const std::set<std::string>& histoRequest,
    const unsigned long maxEvents, const bool verbose,
    const Options& opts)
    : RootChainProcessor<RootMadeClass>(tree, maxEvents),
      options_(opts),
      verbose_(verbose),
      manager_(outputfile, histoRequest),
      channelGeometry_(opts.hbGeometryFile.c_str(),
                       opts.heGeometryFile.c_str()),
      channelSelector_(0),
      channelSelectionMask_(HBHEChannelMap::ChannelCount, 1U),
      mixManager_(new ChargeMixingManager<RootMadeClass>(
                      opts.objConfigFile, verbose)),
      mixInfo_(opts.mixExtraChannels, opts.centralTS),
      rng_(0),
      channelAr_(0),
      channelNtuple_(0)
{
    if (opts.randomSeed)
        rng_ = new npstat::MersenneTwister(opts.randomSeed);
    else
        // Default constructor will pick the RNG seed from /dev/urandom
        rng_ = new npstat::MersenneTwister();

    memset(chargeReconstructed_, 0, sizeof(chargeReconstructed_));
}


template <class Options, class RootMadeClass>
MixedChargeAnalysis<Options,RootMadeClass>::~MixedChargeAnalysis()
{
    delete rng_;
    delete mixManager_;
    delete channelSelector_;
}

    
template <class Options, class RootMadeClass>
Int_t MixedChargeAnalysis<Options,RootMadeClass>::Cut(Long64_t /* entry */)
{
    // return  1 if entry is accepted.
    // return -1 otherwise.
    if (this->NumberOfGoodPrimaryVertices > 0 &&
        this->NumberOfGoodTracks > 0)
        return 1;
    else
        return -1;
}


template <class Options, class RootMadeClass>
Bool_t MixedChargeAnalysis<Options,RootMadeClass>::Notify()
{
    // The Notify() function is called when a new file is opened. This
    // can be either for a new TTree in a TChain or when when a new TTree
    // is started when using PROOF.
    if (verbose_)
    {
        TChain* chain = dynamic_cast<TChain*>(this->fChain);
        assert(chain);
        std::cout << time_stamp()
                  << ": Processing file \"" << chain->GetFile()->GetName()
                  << '"' << std::endl;
    }
    return kTRUE;
}


template <class Options, class RootMadeClass>
int MixedChargeAnalysis<Options,RootMadeClass>::beginJob()
{
    if (verbose_)
        std::cout << "Analysis options are: " << options_ << std::endl;

    // Try to open the archive for storing the mixed charge data
    if (!options_.channelArchive.empty())
    {
        channelAr_ = new gs::BinaryFileArchive(options_.channelArchive.c_str(),
                                               "w:z=z");
        if (!channelAr_->isOpen())
        {
            std::cerr << "Failed to open archive \"" << options_.channelArchive
                      << "\" for writing" << std::endl;
            return 1;
        }

        const char* title = "Mixed Charge Ntuple";
        channelNtuple_ = new npstat::ArchivedNtuple<ChannelChargeMix>(
            npstat::ntupleColumns("MixedCharge"), title,
            *channelAr_, title, "", 1000000/sizeof(ChannelChargeMix));
    }

    // Load the charge determination filters
    if (!options_.filterFile.empty())
    {
        std::ifstream is(options_.filterFile.c_str(), std::ios::binary);
        gs::restore_item(is, &filters);
        if (filters.size() != HBHEChannelMap::ChannelCount)
        {
            std::cerr << "Failed to read filters from file \""
                      << options_.filterFile << "\"." << std::endl;
            return 1;
        }
    }

    // Load events used for charge mixing
    if (verbose_)
    {
        std::cout << "Loading events for charge mixing... ";
        std::cout.flush();
    }        
    TChain* chain = dynamic_cast<TChain*>(this->fChain);
    assert(chain);
    if (!mixManager_->loadEventsToMix(options_.mixListFile,
                                      chain->GetName(), channelMap_))
    {
        if (verbose_)
            std::cout << "Failed" << std::endl;
        return 1;
    }
    if (verbose_)
    {
        std::cout << "Done\n";
        std::cout.flush();
    }

    // Book histograms
    bookManagedHistograms();

    // Verify that all requested items (histograms, ntuples) were
    // successfully created
    return !manager_.verifyHistoRequests();
}


template <class Options, class RootMadeClass>
int MixedChargeAnalysis<Options,RootMadeClass>::event(Long64_t entryNumber)
{
    for (Int_t i=0; i<this->PulseCount; ++i)
    {
        // Determine and remember the channel number for the given "pulse"
        const unsigned chNum = channelMap_.linearIndex(
            this->Depth[i], this->IEta[i], this->IPhi[i]);
        assert(chNum < HBHEChannelMap::ChannelCount);
        channelNumber_[i] = chNum;

        const double* charge = &this->Charge[i][0];

        chargeBeforeMixing_[i] = std::accumulate(
            charge+options_.minResponseTS, charge+options_.maxResponseTS, 0.0);

        preCharge_[i] = std::accumulate(
            charge+options_.minPreTS, charge+options_.maxPreTS, 0.0);

        postCharge_[i] = std::accumulate(
            charge+options_.minPostTS, charge+options_.maxPostTS, 0.0);
    }

    // Select "good" channels
    if (channelSelector_)
        channelSelector_->select(*this, &channelSelectionMask_);

    // Cycle over channel data before mixing the charge
    // Mix the extra charge
    // const int numAllChannels = mixExtraCharge();
    mixExtraCharge();

    // Cycle over channel data after mixing the charge
    for (Int_t i=0; i<this->PulseCount; ++i)
    {
        // Figure out how many pulses will be mixed for this channel
        const unsigned chNum = channelNumber_[i];
        readoutsMixed_[i] = mixInfo_.addedReadouts[chNum];

        // Figure out how much charge was added
        const double* charge = &this->Charge[i][0];

        const double chargeAfterMixing = std::accumulate(
            charge+options_.minResponseTS, charge+options_.maxResponseTS, 0.0);
        chargeAdded_[i] = chargeAfterMixing - chargeBeforeMixing_[i];

        const double preAfterMixing = std::accumulate(
            charge+options_.minPreTS, charge+options_.maxPreTS, 0.0);
        preChargeAdded_[i] = preAfterMixing - preCharge_[i];

        const double postAfterMixing = std::accumulate(
            charge+options_.minPostTS, charge+options_.maxPostTS, 0.0);
        postChargeAdded_[i] = postAfterMixing - postCharge_[i];

        // Fill out the channel-by-channel information for subsequent fitting
        if (channelNtuple_ && channelSelectionMask_[i])
        {
            ChannelChargeMix mix(*this, mixInfo_,
                                 chargeBeforeMixing_[i], i, chNum);
            channelNtuple_->fill(mix);
        }

        // Invoke the filter
        if (!filters.empty())
        {
            const HcalChargeFilter& filter(filters[chNum]);
            if (filter.isValid())
                chargeReconstructed_[i] = filter(charge, 10U);
        }
    }

    fillManagedHistograms();
    return 0;
}


template <class Options, class RootMadeClass>
int MixedChargeAnalysis<Options,RootMadeClass>::endJob()
{
    delete channelNtuple_; channelNtuple_ = 0;
    delete channelAr_; channelAr_ = 0;

    return 0;
}


template <class Options, class RootMadeClass>
void MixedChargeAnalysis<Options,RootMadeClass>::bookManagedHistograms()
{
    // In this method, we book histograms and ntuples which inherit
    // from ManagedHisto and managed by HistogramManager. Management
    // is established by calling the "manage" method of the HistogramManager.
    // Managed histograms and ntuples will be automatically filled,
    // written out, and eventually destroyed, so we don't have to do
    // anything else about histograms themselves inside this class.
    // We do, however, have to make sure that the manager's "AutoFill"
    // and "CycleFill" methods are called as appropriate. This is done
    // inside the "fillManagedHistograms" method which should be modified
    // if you group your histograms in some non-trivial manner.

    if (manager_.isRequested("EventCount"))
        manager_.manage(AutoH1D("EventCount", "Event count as a histogram",
                                "1-d", "Dummy", "Events",
                                1, 0.0, 1.0, Double(0.5), Double(1)));

    //
    // Managed histograms in the TS group.
    // These histos will be filled 10 times per event.
    //
    if (manager_.isRequested("MixedEventsTS"))
        manager_.manage(CycledH2D("MixedEventsTS", "Number of Mixed Events",
                           "TS", "TS", "Events Mixed", "Events",
                           nTimeSlices, -0.5, nTimeSlices-0.5,
                           100, -0.5,  99.5,
                           CycleNumber(), ElementOf(this->mixInfo_.addedEvents),
                           Double(1)), "TS");

    if (manager_.isRequested("MixedNPVsTS"))
        manager_.manage(CycledH2D("MixedNPVsTS", "Number of Mixed Vertices",
                           "TS", "TS", "NPVs Mixed", "Events",
                           nTimeSlices, -0.5, nTimeSlices-0.5,
                           500, -0.5,  499.5,
                           CycleNumber(), ElementOf(this->mixInfo_.addedNPV),
                           Double(1)), "TS");

    //
    // Managed histograms and ntuples in the HBHE group.
    // These items will be filled "PulseCount" times per event.
    //
    if (manager_.isRequested("MixedReadouts"))
        manager_.manage(CycledH1D("MixedReadouts", "Number of Mixed Readouts",
                           "HBHE", "Readouts Mixed", "Channels",
                           200, -0.5, 199.5,
                           ElementOf(this->readoutsMixed_),
                           Double(1)), "HBHE");

    if (manager_.isRequested("filteredQNtuple"))
        manager_.manage(CycledNtuple("FilteredChannelCharge",
                                     "Filtered Channel Charge", "HBHE",
                 std::make_tuple(
                     Column("ChannelNumber",   ElementOf(channelNumber_)),
                     Column("Energy",          ElementOf(this->Energy)),
                     Column("RecHitTime",      ElementOf(this->RecHitTime)),
                     Column("selected",        ElementOf(channelSelectionMask_)),
                     Column("charge",          ElementOf(chargeBeforeMixing_)),
                     Column("chargeReco",      ElementOf(chargeReconstructed_)),
                     Column("chargeAdded",     ElementOf(chargeAdded_)),
                     Column("preCharge",       ElementOf(preCharge_)),
                     Column("preChargeAdded",  ElementOf(preChargeAdded_)),
                     Column("postCharge",      ElementOf(postCharge_)),
                     Column("postChargeAdded", ElementOf(postChargeAdded_)),
                     Column("readoutsMixed",   ElementOf(readoutsMixed_))
                 )), "HBHE");
}


template <class Options, class RootMadeClass>
void MixedChargeAnalysis<Options,RootMadeClass>::fillManagedHistograms()
{
    // Don't forget to call the "AutoFill" and, possibly, "CycleFill"
    // methods of the manager. Managed histograms will be filled there.
    manager_.AutoFill();

    manager_.CycleFill(nTimeSlices, "TS", false);
    manager_.CycleFill(this->PulseCount, "HBHE", false);
}


template <class Options, class RootMadeClass>
int MixedChargeAnalysis<Options,RootMadeClass>::mixExtraCharge()
{
    mixManager_->prepareMix(*rng_, channelMap_, &mixInfo_);
    return mixInfo_.mixWithData<RootMadeClass>(channelMap_, this);
}
