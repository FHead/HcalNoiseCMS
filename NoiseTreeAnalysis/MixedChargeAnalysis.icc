#include <cmath>
#include <iostream>

#include "AutoH1D.h"
#include "AutoH2D.h"
#include "AutoH3D.h"
#include "AutoNtuple.h"

#include "CycledH1D.h"
#include "CycledH2D.h"
#include "CycledH3D.h"
#include "CycledNtuple.h"

#include "Functors.h"
#include "time_stamp.h"

#include "npstat/rng/MersenneTwister.hh"


template <class Options, class RootMadeClass>
MixedChargeAnalysis<Options,RootMadeClass>::MixedChargeAnalysis(
    TTree *tree, const std::string& outputfile,
    const std::set<std::string>& histoRequest,
    const unsigned long maxEvents, const bool verbose,
    const Options& opts)
    : RootChainProcessor<RootMadeClass>(tree, maxEvents),
      options_(opts),
      verbose_(verbose),
      manager_(outputfile, histoRequest),
      mixManager_(new ChargeMixingManager<RootMadeClass>(
                      opts.objConfigFile, verbose)),
      mixInfo_(opts.mixExtraChannels, opts.centralTS),
      rng_(new npstat::MersenneTwister(opts.randomSeed))
{
}


template <class Options, class RootMadeClass>
Int_t MixedChargeAnalysis<Options,RootMadeClass>::Cut(Long64_t /* entry */)
{
    // return  1 if entry is accepted.
    // return -1 otherwise.
    if (this->NumberOfGoodPrimaryVertices > 0 &&
        this->NumberOfGoodTracks > 0)
        return 1;
    else
        return -1;
}


template <class Options, class RootMadeClass>
Bool_t MixedChargeAnalysis<Options,RootMadeClass>::Notify()
{
    // The Notify() function is called when a new file is opened. This
    // can be either for a new TTree in a TChain or when when a new TTree
    // is started when using PROOF.
    if (verbose_)
    {
        TChain* chain = dynamic_cast<TChain*>(this->fChain);
        assert(chain);
        std::cout << time_stamp()
                  << ": Processing file \"" << chain->GetFile()->GetName()
                  << '"' << std::endl;
    }
    return kTRUE;
}


template <class Options, class RootMadeClass>
int MixedChargeAnalysis<Options,RootMadeClass>::beginJob()
{
    if (verbose_)
        std::cout << "Analysis options are: " << options_ << std::endl;

    // Load events used for charge mixing
    TChain* chain = dynamic_cast<TChain*>(this->fChain);
    assert(chain);
    if (!mixManager_->loadEventsToMix(options_.mixListFile,
                                      chain->GetName(), channelMap_))
        return 1;

    // Book histograms
    bookManagedHistograms();

    // Verify that all requested items (histograms, ntuples) were
    // successfully created
    return !manager_.verifyHistoRequests();
}


template <class Options, class RootMadeClass>
int MixedChargeAnalysis<Options,RootMadeClass>::event(Long64_t entryNumber)
{
    // const int numAllChannels = mixExtraCharge();
    mixExtraCharge();

    // Cycle over channel data
    for (Int_t i=0; i<this->PulseCount; ++i)
    {
        // Determine and remember the channel number for the given "pulse"
        const unsigned chNum = channelMap_.linearIndex(
            this->Depth[i], this->IEta[i], this->IPhi[i]);

        // Figure out how many pulses will be mixed for this channel
        readoutsMixed_[i] = mixInfo_.addedReadouts[chNum];
    }

    fillManagedHistograms();
    return 0;
}


template <class Options, class RootMadeClass>
int MixedChargeAnalysis<Options,RootMadeClass>::endJob()
{
    return 0;
}


template <class Options, class RootMadeClass>
void MixedChargeAnalysis<Options,RootMadeClass>::bookManagedHistograms()
{
    // In this method, we book histograms and ntuples which inherit
    // from ManagedHisto and managed by HistogramManager. Management
    // is established by calling the "manage" method of the HistogramManager.
    // Managed histograms and ntuples will be automatically filled,
    // written out, and eventually destroyed, so we don't have to do
    // anything else about histograms themselves inside this class.
    // We do, however, have to make sure that the manager's "AutoFill"
    // and "CycleFill" methods are called as appropriate. This is done
    // inside the "fillManagedHistograms" method which should be modified
    // if you group your histograms in some non-trivial manner.

    if (manager_.isRequested("EventCount"))
        manager_.manage(AutoH1D("EventCount", "Event count as a histogram",
                                "1-d", "Dummy", "Events",
                                1, 0.0, 1.0, Double(0.5), Double(1)));

    //
    // Managed histograms in the TS group.
    // These histos will be filled 10
    // times per event.
    //
    if (manager_.isRequested("MixedEventsTS"))
        manager_.manage(CycledH2D("MixedEventsTS", "Number of Mixed Events",
                           "TS", "TS", "Events Mixed", "Events",
                           nTimeSlices, -0.5, nTimeSlices-0.5,
                           100, -0.5,  99.5,
                           CycleNumber(), ElementOf(this->mixInfo_.addedEvents),
                           Double(1)), "TS");

    if (manager_.isRequested("MixedNPVsTS"))
        manager_.manage(CycledH2D("MixedNPVsTS", "Number of Mixed Vertices",
                           "TS", "TS", "NPVs Mixed", "Events",
                           nTimeSlices, -0.5, nTimeSlices-0.5,
                           500, -0.5,  499.5,
                           CycleNumber(), ElementOf(this->mixInfo_.addedNPV),
                           Double(1)), "TS");

    //
    // Managed histograms in the HBHE group.
    // These histos will be filled "PulseCount"
    // times per event.
    //
    if (manager_.isRequested("MixedReadouts"))
        manager_.manage(CycledH1D("MixedReadouts", "Number of Mixed Readouts",
                           "HBHE", "Readouts Mixed", "Channels",
                           200, -0.5, 199.5,
                           ElementOf(this->readoutsMixed_),
                           Double(1)), "HBHE");
}


template <class Options, class RootMadeClass>
void MixedChargeAnalysis<Options,RootMadeClass>::fillManagedHistograms()
{
    // Don't forget to call the "AutoFill" and, possibly, "CycleFill"
    // methods of the manager. Managed histograms will be filled there.
    manager_.AutoFill();

    manager_.CycleFill(this->PulseCount, "HBHE", false);
    manager_.CycleFill(nTimeSlices, "TS", false);
}


template <class Options, class RootMadeClass>
int MixedChargeAnalysis<Options,RootMadeClass>::mixExtraCharge()
{
    mixManager_->prepareMix(*rng_, channelMap_, &mixInfo_);
    return mixInfo_.mixWithData<RootMadeClass>(channelMap_, this);
}
