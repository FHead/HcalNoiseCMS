#!/usr/bin/env python

"""
Usage: make_configFile.py output_file ave_events
"""

import sys
import npstat
from npstat import ArchiveRecord_AbsDiscreteDistribution1D as DistroRecord

#
# The function "make_mixing_distributions" constructs two distributions
# which inherit from the "AbsDiscreteDistribution1D" base class of the
# NPStat package:
#
# http://npstat.hepforge.org/svn/trunk/npstat/stat/AbsDiscreteDistribution1D.hh
#
# Any class derived from AbsDiscreteDistribution1D can be used either 
# to generate the number of events to mix or to generate the number
# of time slice shifts. The two derived classes which are especially
# appropriate for these purposes are "Poisson1D" and "DiscreteTabulated1D".
# In principle, the "DiscreteTabulated1D" class can be used to represent
# an arbitrary discrete distribution with finite support.
#
# The constructor arguments of these classes are, more or less, equivialent
# to the C++ constructor arguments, as in
#
# http://npstat.hepforge.org/svn/trunk/npstat/stat/DiscreteDistributions1D.hh
#
# As the python wrapper code is generated by SWIG, it helps to know the SWIG
# argument replacement conventions. In particular, the std::vector<double>
# argument used in C++ to give the table of probabilities to the
# DiscreteTabulated1D constructor is replaced in Python by a sequence
# of floats (list or tuple).
#
def make_mixing_distributions(ar, nevents):
    # Distribution to use for the number of mixed events.
    # The Poisson1D class constructor argument is simply
    # the average number of events to mix ("poisson lambda").
    events_mix_distro = npstat.Poisson1D(nevents)
    ar.store(DistroRecord(events_mix_distro, "Event Distribution", "Mixing"))

    # Distribution of time slice shifts. The first constructor argument
    # is the time shift which corresponds to the first element in the
    # probability table, and the secont argument is the table itself.
    # Thus "npstat.DiscreteTabulated1D(-1L, (0.5, 0.0, 0.5))" will build
    # the distribution that shifts charge to the left by 1 time slice with
    # probability 1/2 and to the right by 1 time slice with probability 1/2.
    # The probabilities do not have to be normalized here, only their
    # relative magnitudes matter.
    #
    # Edit this code directly to suit your needs. For example, to always
    # shift left by one time slice, do the following:
    #
    # npstat.DiscreteTabulated1D(-1L, (1.0,))
    #
    time_shift_distro = npstat.DiscreteTabulated1D(-1L, (0.5, 0.0, 0.5))
    ar.store(DistroRecord(time_shift_distro, "TS Distribution", "Mixing"))
    return


def main(argv):
    # Parse command line options
    argc = len(argv)
    if (argc == 0):
        # Convention used here: command invoked without any arguments
        # prints its usage instruction and exits successfully
        print __doc__
        return 0
    elif (argc == 2):
        # We have the correct number of arguments
        i = 0
        output_file = argv[i]; i+=1
        nevents = float(argv[i]); i+=1
    else:
        # The number of arguments is incorrect
        print __doc__
        return 1

    # Create the string achive which will hold all config objects
    ar = npstat.StringArchive()

    # Call functions which construct the config objects
    make_mixing_distributions(ar, nevents)

    # Write out the configuration archive
    if npstat.writeCompressedStringArchiveExt(ar, output_file):
        print 'Wrote object configuration file "%s"'  % output_file
        return 0
    else:
        print 'Failed to write file "%s"' % output_file
        return 2


if __name__=='__main__':
    sys.exit(main(sys.argv[1:]))
