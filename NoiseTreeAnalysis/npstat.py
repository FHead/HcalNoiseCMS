# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_npstat', [dirname(__file__)])
        except ImportError:
            import _npstat
            return _npstat
        if fp is not None:
            try:
                _mod = imp.load_module('_npstat', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _npstat = swig_import_helper()
    del swig_import_helper
else:
    import _npstat
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _npstat.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _npstat.SwigPyIterator_value(self)
    def incr(self, n=1): return _npstat.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _npstat.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _npstat.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _npstat.SwigPyIterator_equal(self, *args)
    def copy(self): return _npstat.SwigPyIterator_copy(self)
    def next(self): return _npstat.SwigPyIterator_next(self)
    def __next__(self): return _npstat.SwigPyIterator___next__(self)
    def previous(self): return _npstat.SwigPyIterator_previous(self)
    def advance(self, *args): return _npstat.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _npstat.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _npstat.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _npstat.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _npstat.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _npstat.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _npstat.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _npstat.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class SCharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SCharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SCharVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _npstat.SCharVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _npstat.SCharVector___nonzero__(self)
    def __bool__(self): return _npstat.SCharVector___bool__(self)
    def __len__(self): return _npstat.SCharVector___len__(self)
    def pop(self): return _npstat.SCharVector_pop(self)
    def __getslice__(self, *args): return _npstat.SCharVector___getslice__(self, *args)
    def __setslice__(self, *args): return _npstat.SCharVector___setslice__(self, *args)
    def __delslice__(self, *args): return _npstat.SCharVector___delslice__(self, *args)
    def __delitem__(self, *args): return _npstat.SCharVector___delitem__(self, *args)
    def __getitem__(self, *args): return _npstat.SCharVector___getitem__(self, *args)
    def __setitem__(self, *args): return _npstat.SCharVector___setitem__(self, *args)
    def append(self, *args): return _npstat.SCharVector_append(self, *args)
    def empty(self): return _npstat.SCharVector_empty(self)
    def size(self): return _npstat.SCharVector_size(self)
    def clear(self): return _npstat.SCharVector_clear(self)
    def swap(self, *args): return _npstat.SCharVector_swap(self, *args)
    def get_allocator(self): return _npstat.SCharVector_get_allocator(self)
    def begin(self): return _npstat.SCharVector_begin(self)
    def end(self): return _npstat.SCharVector_end(self)
    def rbegin(self): return _npstat.SCharVector_rbegin(self)
    def rend(self): return _npstat.SCharVector_rend(self)
    def pop_back(self): return _npstat.SCharVector_pop_back(self)
    def erase(self, *args): return _npstat.SCharVector_erase(self, *args)
    def __init__(self, *args): 
        this = _npstat.new_SCharVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _npstat.SCharVector_push_back(self, *args)
    def front(self): return _npstat.SCharVector_front(self)
    def back(self): return _npstat.SCharVector_back(self)
    def assign(self, *args): return _npstat.SCharVector_assign(self, *args)
    def resize(self, *args): return _npstat.SCharVector_resize(self, *args)
    def insert(self, *args): return _npstat.SCharVector_insert(self, *args)
    def reserve(self, *args): return _npstat.SCharVector_reserve(self, *args)
    def capacity(self): return _npstat.SCharVector_capacity(self)
    __swig_destroy__ = _npstat.delete_SCharVector
    __del__ = lambda self : None;
SCharVector_swigregister = _npstat.SCharVector_swigregister
SCharVector_swigregister(SCharVector)

class UCharVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UCharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UCharVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _npstat.UCharVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _npstat.UCharVector___nonzero__(self)
    def __bool__(self): return _npstat.UCharVector___bool__(self)
    def __len__(self): return _npstat.UCharVector___len__(self)
    def pop(self): return _npstat.UCharVector_pop(self)
    def __getslice__(self, *args): return _npstat.UCharVector___getslice__(self, *args)
    def __setslice__(self, *args): return _npstat.UCharVector___setslice__(self, *args)
    def __delslice__(self, *args): return _npstat.UCharVector___delslice__(self, *args)
    def __delitem__(self, *args): return _npstat.UCharVector___delitem__(self, *args)
    def __getitem__(self, *args): return _npstat.UCharVector___getitem__(self, *args)
    def __setitem__(self, *args): return _npstat.UCharVector___setitem__(self, *args)
    def append(self, *args): return _npstat.UCharVector_append(self, *args)
    def empty(self): return _npstat.UCharVector_empty(self)
    def size(self): return _npstat.UCharVector_size(self)
    def clear(self): return _npstat.UCharVector_clear(self)
    def swap(self, *args): return _npstat.UCharVector_swap(self, *args)
    def get_allocator(self): return _npstat.UCharVector_get_allocator(self)
    def begin(self): return _npstat.UCharVector_begin(self)
    def end(self): return _npstat.UCharVector_end(self)
    def rbegin(self): return _npstat.UCharVector_rbegin(self)
    def rend(self): return _npstat.UCharVector_rend(self)
    def pop_back(self): return _npstat.UCharVector_pop_back(self)
    def erase(self, *args): return _npstat.UCharVector_erase(self, *args)
    def __init__(self, *args): 
        this = _npstat.new_UCharVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _npstat.UCharVector_push_back(self, *args)
    def front(self): return _npstat.UCharVector_front(self)
    def back(self): return _npstat.UCharVector_back(self)
    def assign(self, *args): return _npstat.UCharVector_assign(self, *args)
    def resize(self, *args): return _npstat.UCharVector_resize(self, *args)
    def insert(self, *args): return _npstat.UCharVector_insert(self, *args)
    def reserve(self, *args): return _npstat.UCharVector_reserve(self, *args)
    def capacity(self): return _npstat.UCharVector_capacity(self)
    __swig_destroy__ = _npstat.delete_UCharVector
    __del__ = lambda self : None;
UCharVector_swigregister = _npstat.UCharVector_swigregister
UCharVector_swigregister(UCharVector)

class ShortVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShortVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ShortVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _npstat.ShortVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _npstat.ShortVector___nonzero__(self)
    def __bool__(self): return _npstat.ShortVector___bool__(self)
    def __len__(self): return _npstat.ShortVector___len__(self)
    def pop(self): return _npstat.ShortVector_pop(self)
    def __getslice__(self, *args): return _npstat.ShortVector___getslice__(self, *args)
    def __setslice__(self, *args): return _npstat.ShortVector___setslice__(self, *args)
    def __delslice__(self, *args): return _npstat.ShortVector___delslice__(self, *args)
    def __delitem__(self, *args): return _npstat.ShortVector___delitem__(self, *args)
    def __getitem__(self, *args): return _npstat.ShortVector___getitem__(self, *args)
    def __setitem__(self, *args): return _npstat.ShortVector___setitem__(self, *args)
    def append(self, *args): return _npstat.ShortVector_append(self, *args)
    def empty(self): return _npstat.ShortVector_empty(self)
    def size(self): return _npstat.ShortVector_size(self)
    def clear(self): return _npstat.ShortVector_clear(self)
    def swap(self, *args): return _npstat.ShortVector_swap(self, *args)
    def get_allocator(self): return _npstat.ShortVector_get_allocator(self)
    def begin(self): return _npstat.ShortVector_begin(self)
    def end(self): return _npstat.ShortVector_end(self)
    def rbegin(self): return _npstat.ShortVector_rbegin(self)
    def rend(self): return _npstat.ShortVector_rend(self)
    def pop_back(self): return _npstat.ShortVector_pop_back(self)
    def erase(self, *args): return _npstat.ShortVector_erase(self, *args)
    def __init__(self, *args): 
        this = _npstat.new_ShortVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _npstat.ShortVector_push_back(self, *args)
    def front(self): return _npstat.ShortVector_front(self)
    def back(self): return _npstat.ShortVector_back(self)
    def assign(self, *args): return _npstat.ShortVector_assign(self, *args)
    def resize(self, *args): return _npstat.ShortVector_resize(self, *args)
    def insert(self, *args): return _npstat.ShortVector_insert(self, *args)
    def reserve(self, *args): return _npstat.ShortVector_reserve(self, *args)
    def capacity(self): return _npstat.ShortVector_capacity(self)
    __swig_destroy__ = _npstat.delete_ShortVector
    __del__ = lambda self : None;
ShortVector_swigregister = _npstat.ShortVector_swigregister
ShortVector_swigregister(ShortVector)

class UShortVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UShortVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UShortVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _npstat.UShortVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _npstat.UShortVector___nonzero__(self)
    def __bool__(self): return _npstat.UShortVector___bool__(self)
    def __len__(self): return _npstat.UShortVector___len__(self)
    def pop(self): return _npstat.UShortVector_pop(self)
    def __getslice__(self, *args): return _npstat.UShortVector___getslice__(self, *args)
    def __setslice__(self, *args): return _npstat.UShortVector___setslice__(self, *args)
    def __delslice__(self, *args): return _npstat.UShortVector___delslice__(self, *args)
    def __delitem__(self, *args): return _npstat.UShortVector___delitem__(self, *args)
    def __getitem__(self, *args): return _npstat.UShortVector___getitem__(self, *args)
    def __setitem__(self, *args): return _npstat.UShortVector___setitem__(self, *args)
    def append(self, *args): return _npstat.UShortVector_append(self, *args)
    def empty(self): return _npstat.UShortVector_empty(self)
    def size(self): return _npstat.UShortVector_size(self)
    def clear(self): return _npstat.UShortVector_clear(self)
    def swap(self, *args): return _npstat.UShortVector_swap(self, *args)
    def get_allocator(self): return _npstat.UShortVector_get_allocator(self)
    def begin(self): return _npstat.UShortVector_begin(self)
    def end(self): return _npstat.UShortVector_end(self)
    def rbegin(self): return _npstat.UShortVector_rbegin(self)
    def rend(self): return _npstat.UShortVector_rend(self)
    def pop_back(self): return _npstat.UShortVector_pop_back(self)
    def erase(self, *args): return _npstat.UShortVector_erase(self, *args)
    def __init__(self, *args): 
        this = _npstat.new_UShortVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _npstat.UShortVector_push_back(self, *args)
    def front(self): return _npstat.UShortVector_front(self)
    def back(self): return _npstat.UShortVector_back(self)
    def assign(self, *args): return _npstat.UShortVector_assign(self, *args)
    def resize(self, *args): return _npstat.UShortVector_resize(self, *args)
    def insert(self, *args): return _npstat.UShortVector_insert(self, *args)
    def reserve(self, *args): return _npstat.UShortVector_reserve(self, *args)
    def capacity(self): return _npstat.UShortVector_capacity(self)
    __swig_destroy__ = _npstat.delete_UShortVector
    __del__ = lambda self : None;
UShortVector_swigregister = _npstat.UShortVector_swigregister
UShortVector_swigregister(UShortVector)

class LongVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _npstat.LongVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _npstat.LongVector___nonzero__(self)
    def __bool__(self): return _npstat.LongVector___bool__(self)
    def __len__(self): return _npstat.LongVector___len__(self)
    def pop(self): return _npstat.LongVector_pop(self)
    def __getslice__(self, *args): return _npstat.LongVector___getslice__(self, *args)
    def __setslice__(self, *args): return _npstat.LongVector___setslice__(self, *args)
    def __delslice__(self, *args): return _npstat.LongVector___delslice__(self, *args)
    def __delitem__(self, *args): return _npstat.LongVector___delitem__(self, *args)
    def __getitem__(self, *args): return _npstat.LongVector___getitem__(self, *args)
    def __setitem__(self, *args): return _npstat.LongVector___setitem__(self, *args)
    def append(self, *args): return _npstat.LongVector_append(self, *args)
    def empty(self): return _npstat.LongVector_empty(self)
    def size(self): return _npstat.LongVector_size(self)
    def clear(self): return _npstat.LongVector_clear(self)
    def swap(self, *args): return _npstat.LongVector_swap(self, *args)
    def get_allocator(self): return _npstat.LongVector_get_allocator(self)
    def begin(self): return _npstat.LongVector_begin(self)
    def end(self): return _npstat.LongVector_end(self)
    def rbegin(self): return _npstat.LongVector_rbegin(self)
    def rend(self): return _npstat.LongVector_rend(self)
    def pop_back(self): return _npstat.LongVector_pop_back(self)
    def erase(self, *args): return _npstat.LongVector_erase(self, *args)
    def __init__(self, *args): 
        this = _npstat.new_LongVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _npstat.LongVector_push_back(self, *args)
    def front(self): return _npstat.LongVector_front(self)
    def back(self): return _npstat.LongVector_back(self)
    def assign(self, *args): return _npstat.LongVector_assign(self, *args)
    def resize(self, *args): return _npstat.LongVector_resize(self, *args)
    def insert(self, *args): return _npstat.LongVector_insert(self, *args)
    def reserve(self, *args): return _npstat.LongVector_reserve(self, *args)
    def capacity(self): return _npstat.LongVector_capacity(self)
    __swig_destroy__ = _npstat.delete_LongVector
    __del__ = lambda self : None;
LongVector_swigregister = _npstat.LongVector_swigregister
LongVector_swigregister(LongVector)

class ULongVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ULongVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ULongVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _npstat.ULongVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _npstat.ULongVector___nonzero__(self)
    def __bool__(self): return _npstat.ULongVector___bool__(self)
    def __len__(self): return _npstat.ULongVector___len__(self)
    def pop(self): return _npstat.ULongVector_pop(self)
    def __getslice__(self, *args): return _npstat.ULongVector___getslice__(self, *args)
    def __setslice__(self, *args): return _npstat.ULongVector___setslice__(self, *args)
    def __delslice__(self, *args): return _npstat.ULongVector___delslice__(self, *args)
    def __delitem__(self, *args): return _npstat.ULongVector___delitem__(self, *args)
    def __getitem__(self, *args): return _npstat.ULongVector___getitem__(self, *args)
    def __setitem__(self, *args): return _npstat.ULongVector___setitem__(self, *args)
    def append(self, *args): return _npstat.ULongVector_append(self, *args)
    def empty(self): return _npstat.ULongVector_empty(self)
    def size(self): return _npstat.ULongVector_size(self)
    def clear(self): return _npstat.ULongVector_clear(self)
    def swap(self, *args): return _npstat.ULongVector_swap(self, *args)
    def get_allocator(self): return _npstat.ULongVector_get_allocator(self)
    def begin(self): return _npstat.ULongVector_begin(self)
    def end(self): return _npstat.ULongVector_end(self)
    def rbegin(self): return _npstat.ULongVector_rbegin(self)
    def rend(self): return _npstat.ULongVector_rend(self)
    def pop_back(self): return _npstat.ULongVector_pop_back(self)
    def erase(self, *args): return _npstat.ULongVector_erase(self, *args)
    def __init__(self, *args): 
        this = _npstat.new_ULongVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _npstat.ULongVector_push_back(self, *args)
    def front(self): return _npstat.ULongVector_front(self)
    def back(self): return _npstat.ULongVector_back(self)
    def assign(self, *args): return _npstat.ULongVector_assign(self, *args)
    def resize(self, *args): return _npstat.ULongVector_resize(self, *args)
    def insert(self, *args): return _npstat.ULongVector_insert(self, *args)
    def reserve(self, *args): return _npstat.ULongVector_reserve(self, *args)
    def capacity(self): return _npstat.ULongVector_capacity(self)
    __swig_destroy__ = _npstat.delete_ULongVector
    __del__ = lambda self : None;
ULongVector_swigregister = _npstat.ULongVector_swigregister
ULongVector_swigregister(ULongVector)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _npstat.IntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _npstat.IntVector___nonzero__(self)
    def __bool__(self): return _npstat.IntVector___bool__(self)
    def __len__(self): return _npstat.IntVector___len__(self)
    def pop(self): return _npstat.IntVector_pop(self)
    def __getslice__(self, *args): return _npstat.IntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _npstat.IntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _npstat.IntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _npstat.IntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _npstat.IntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _npstat.IntVector___setitem__(self, *args)
    def append(self, *args): return _npstat.IntVector_append(self, *args)
    def empty(self): return _npstat.IntVector_empty(self)
    def size(self): return _npstat.IntVector_size(self)
    def clear(self): return _npstat.IntVector_clear(self)
    def swap(self, *args): return _npstat.IntVector_swap(self, *args)
    def get_allocator(self): return _npstat.IntVector_get_allocator(self)
    def begin(self): return _npstat.IntVector_begin(self)
    def end(self): return _npstat.IntVector_end(self)
    def rbegin(self): return _npstat.IntVector_rbegin(self)
    def rend(self): return _npstat.IntVector_rend(self)
    def pop_back(self): return _npstat.IntVector_pop_back(self)
    def erase(self, *args): return _npstat.IntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _npstat.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _npstat.IntVector_push_back(self, *args)
    def front(self): return _npstat.IntVector_front(self)
    def back(self): return _npstat.IntVector_back(self)
    def assign(self, *args): return _npstat.IntVector_assign(self, *args)
    def resize(self, *args): return _npstat.IntVector_resize(self, *args)
    def insert(self, *args): return _npstat.IntVector_insert(self, *args)
    def reserve(self, *args): return _npstat.IntVector_reserve(self, *args)
    def capacity(self): return _npstat.IntVector_capacity(self)
    __swig_destroy__ = _npstat.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _npstat.IntVector_swigregister
IntVector_swigregister(IntVector)

class LLongVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LLongVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LLongVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _npstat.LLongVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _npstat.LLongVector___nonzero__(self)
    def __bool__(self): return _npstat.LLongVector___bool__(self)
    def __len__(self): return _npstat.LLongVector___len__(self)
    def pop(self): return _npstat.LLongVector_pop(self)
    def __getslice__(self, *args): return _npstat.LLongVector___getslice__(self, *args)
    def __setslice__(self, *args): return _npstat.LLongVector___setslice__(self, *args)
    def __delslice__(self, *args): return _npstat.LLongVector___delslice__(self, *args)
    def __delitem__(self, *args): return _npstat.LLongVector___delitem__(self, *args)
    def __getitem__(self, *args): return _npstat.LLongVector___getitem__(self, *args)
    def __setitem__(self, *args): return _npstat.LLongVector___setitem__(self, *args)
    def append(self, *args): return _npstat.LLongVector_append(self, *args)
    def empty(self): return _npstat.LLongVector_empty(self)
    def size(self): return _npstat.LLongVector_size(self)
    def clear(self): return _npstat.LLongVector_clear(self)
    def swap(self, *args): return _npstat.LLongVector_swap(self, *args)
    def get_allocator(self): return _npstat.LLongVector_get_allocator(self)
    def begin(self): return _npstat.LLongVector_begin(self)
    def end(self): return _npstat.LLongVector_end(self)
    def rbegin(self): return _npstat.LLongVector_rbegin(self)
    def rend(self): return _npstat.LLongVector_rend(self)
    def pop_back(self): return _npstat.LLongVector_pop_back(self)
    def erase(self, *args): return _npstat.LLongVector_erase(self, *args)
    def __init__(self, *args): 
        this = _npstat.new_LLongVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _npstat.LLongVector_push_back(self, *args)
    def front(self): return _npstat.LLongVector_front(self)
    def back(self): return _npstat.LLongVector_back(self)
    def assign(self, *args): return _npstat.LLongVector_assign(self, *args)
    def resize(self, *args): return _npstat.LLongVector_resize(self, *args)
    def insert(self, *args): return _npstat.LLongVector_insert(self, *args)
    def reserve(self, *args): return _npstat.LLongVector_reserve(self, *args)
    def capacity(self): return _npstat.LLongVector_capacity(self)
    __swig_destroy__ = _npstat.delete_LLongVector
    __del__ = lambda self : None;
LLongVector_swigregister = _npstat.LLongVector_swigregister
LLongVector_swigregister(LLongVector)

class UIntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UIntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UIntVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _npstat.UIntVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _npstat.UIntVector___nonzero__(self)
    def __bool__(self): return _npstat.UIntVector___bool__(self)
    def __len__(self): return _npstat.UIntVector___len__(self)
    def pop(self): return _npstat.UIntVector_pop(self)
    def __getslice__(self, *args): return _npstat.UIntVector___getslice__(self, *args)
    def __setslice__(self, *args): return _npstat.UIntVector___setslice__(self, *args)
    def __delslice__(self, *args): return _npstat.UIntVector___delslice__(self, *args)
    def __delitem__(self, *args): return _npstat.UIntVector___delitem__(self, *args)
    def __getitem__(self, *args): return _npstat.UIntVector___getitem__(self, *args)
    def __setitem__(self, *args): return _npstat.UIntVector___setitem__(self, *args)
    def append(self, *args): return _npstat.UIntVector_append(self, *args)
    def empty(self): return _npstat.UIntVector_empty(self)
    def size(self): return _npstat.UIntVector_size(self)
    def clear(self): return _npstat.UIntVector_clear(self)
    def swap(self, *args): return _npstat.UIntVector_swap(self, *args)
    def get_allocator(self): return _npstat.UIntVector_get_allocator(self)
    def begin(self): return _npstat.UIntVector_begin(self)
    def end(self): return _npstat.UIntVector_end(self)
    def rbegin(self): return _npstat.UIntVector_rbegin(self)
    def rend(self): return _npstat.UIntVector_rend(self)
    def pop_back(self): return _npstat.UIntVector_pop_back(self)
    def erase(self, *args): return _npstat.UIntVector_erase(self, *args)
    def __init__(self, *args): 
        this = _npstat.new_UIntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _npstat.UIntVector_push_back(self, *args)
    def front(self): return _npstat.UIntVector_front(self)
    def back(self): return _npstat.UIntVector_back(self)
    def assign(self, *args): return _npstat.UIntVector_assign(self, *args)
    def resize(self, *args): return _npstat.UIntVector_resize(self, *args)
    def insert(self, *args): return _npstat.UIntVector_insert(self, *args)
    def reserve(self, *args): return _npstat.UIntVector_reserve(self, *args)
    def capacity(self): return _npstat.UIntVector_capacity(self)
    __swig_destroy__ = _npstat.delete_UIntVector
    __del__ = lambda self : None;
UIntVector_swigregister = _npstat.UIntVector_swigregister
UIntVector_swigregister(UIntVector)

class ULLongVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ULLongVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ULLongVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _npstat.ULLongVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _npstat.ULLongVector___nonzero__(self)
    def __bool__(self): return _npstat.ULLongVector___bool__(self)
    def __len__(self): return _npstat.ULLongVector___len__(self)
    def pop(self): return _npstat.ULLongVector_pop(self)
    def __getslice__(self, *args): return _npstat.ULLongVector___getslice__(self, *args)
    def __setslice__(self, *args): return _npstat.ULLongVector___setslice__(self, *args)
    def __delslice__(self, *args): return _npstat.ULLongVector___delslice__(self, *args)
    def __delitem__(self, *args): return _npstat.ULLongVector___delitem__(self, *args)
    def __getitem__(self, *args): return _npstat.ULLongVector___getitem__(self, *args)
    def __setitem__(self, *args): return _npstat.ULLongVector___setitem__(self, *args)
    def append(self, *args): return _npstat.ULLongVector_append(self, *args)
    def empty(self): return _npstat.ULLongVector_empty(self)
    def size(self): return _npstat.ULLongVector_size(self)
    def clear(self): return _npstat.ULLongVector_clear(self)
    def swap(self, *args): return _npstat.ULLongVector_swap(self, *args)
    def get_allocator(self): return _npstat.ULLongVector_get_allocator(self)
    def begin(self): return _npstat.ULLongVector_begin(self)
    def end(self): return _npstat.ULLongVector_end(self)
    def rbegin(self): return _npstat.ULLongVector_rbegin(self)
    def rend(self): return _npstat.ULLongVector_rend(self)
    def pop_back(self): return _npstat.ULLongVector_pop_back(self)
    def erase(self, *args): return _npstat.ULLongVector_erase(self, *args)
    def __init__(self, *args): 
        this = _npstat.new_ULLongVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _npstat.ULLongVector_push_back(self, *args)
    def front(self): return _npstat.ULLongVector_front(self)
    def back(self): return _npstat.ULLongVector_back(self)
    def assign(self, *args): return _npstat.ULLongVector_assign(self, *args)
    def resize(self, *args): return _npstat.ULLongVector_resize(self, *args)
    def insert(self, *args): return _npstat.ULLongVector_insert(self, *args)
    def reserve(self, *args): return _npstat.ULLongVector_reserve(self, *args)
    def capacity(self): return _npstat.ULLongVector_capacity(self)
    __swig_destroy__ = _npstat.delete_ULLongVector
    __del__ = lambda self : None;
ULLongVector_swigregister = _npstat.ULLongVector_swigregister
ULLongVector_swigregister(ULLongVector)

class FloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _npstat.FloatVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _npstat.FloatVector___nonzero__(self)
    def __bool__(self): return _npstat.FloatVector___bool__(self)
    def __len__(self): return _npstat.FloatVector___len__(self)
    def pop(self): return _npstat.FloatVector_pop(self)
    def __getslice__(self, *args): return _npstat.FloatVector___getslice__(self, *args)
    def __setslice__(self, *args): return _npstat.FloatVector___setslice__(self, *args)
    def __delslice__(self, *args): return _npstat.FloatVector___delslice__(self, *args)
    def __delitem__(self, *args): return _npstat.FloatVector___delitem__(self, *args)
    def __getitem__(self, *args): return _npstat.FloatVector___getitem__(self, *args)
    def __setitem__(self, *args): return _npstat.FloatVector___setitem__(self, *args)
    def append(self, *args): return _npstat.FloatVector_append(self, *args)
    def empty(self): return _npstat.FloatVector_empty(self)
    def size(self): return _npstat.FloatVector_size(self)
    def clear(self): return _npstat.FloatVector_clear(self)
    def swap(self, *args): return _npstat.FloatVector_swap(self, *args)
    def get_allocator(self): return _npstat.FloatVector_get_allocator(self)
    def begin(self): return _npstat.FloatVector_begin(self)
    def end(self): return _npstat.FloatVector_end(self)
    def rbegin(self): return _npstat.FloatVector_rbegin(self)
    def rend(self): return _npstat.FloatVector_rend(self)
    def pop_back(self): return _npstat.FloatVector_pop_back(self)
    def erase(self, *args): return _npstat.FloatVector_erase(self, *args)
    def __init__(self, *args): 
        this = _npstat.new_FloatVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _npstat.FloatVector_push_back(self, *args)
    def front(self): return _npstat.FloatVector_front(self)
    def back(self): return _npstat.FloatVector_back(self)
    def assign(self, *args): return _npstat.FloatVector_assign(self, *args)
    def resize(self, *args): return _npstat.FloatVector_resize(self, *args)
    def insert(self, *args): return _npstat.FloatVector_insert(self, *args)
    def reserve(self, *args): return _npstat.FloatVector_reserve(self, *args)
    def capacity(self): return _npstat.FloatVector_capacity(self)
    __swig_destroy__ = _npstat.delete_FloatVector
    __del__ = lambda self : None;
FloatVector_swigregister = _npstat.FloatVector_swigregister
FloatVector_swigregister(FloatVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _npstat.DoubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _npstat.DoubleVector___nonzero__(self)
    def __bool__(self): return _npstat.DoubleVector___bool__(self)
    def __len__(self): return _npstat.DoubleVector___len__(self)
    def pop(self): return _npstat.DoubleVector_pop(self)
    def __getslice__(self, *args): return _npstat.DoubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _npstat.DoubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _npstat.DoubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _npstat.DoubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _npstat.DoubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _npstat.DoubleVector___setitem__(self, *args)
    def append(self, *args): return _npstat.DoubleVector_append(self, *args)
    def empty(self): return _npstat.DoubleVector_empty(self)
    def size(self): return _npstat.DoubleVector_size(self)
    def clear(self): return _npstat.DoubleVector_clear(self)
    def swap(self, *args): return _npstat.DoubleVector_swap(self, *args)
    def get_allocator(self): return _npstat.DoubleVector_get_allocator(self)
    def begin(self): return _npstat.DoubleVector_begin(self)
    def end(self): return _npstat.DoubleVector_end(self)
    def rbegin(self): return _npstat.DoubleVector_rbegin(self)
    def rend(self): return _npstat.DoubleVector_rend(self)
    def pop_back(self): return _npstat.DoubleVector_pop_back(self)
    def erase(self, *args): return _npstat.DoubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _npstat.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _npstat.DoubleVector_push_back(self, *args)
    def front(self): return _npstat.DoubleVector_front(self)
    def back(self): return _npstat.DoubleVector_back(self)
    def assign(self, *args): return _npstat.DoubleVector_assign(self, *args)
    def resize(self, *args): return _npstat.DoubleVector_resize(self, *args)
    def insert(self, *args): return _npstat.DoubleVector_insert(self, *args)
    def reserve(self, *args): return _npstat.DoubleVector_reserve(self, *args)
    def capacity(self): return _npstat.DoubleVector_capacity(self)
    __swig_destroy__ = _npstat.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _npstat.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class LDoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LDoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LDoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _npstat.LDoubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _npstat.LDoubleVector___nonzero__(self)
    def __bool__(self): return _npstat.LDoubleVector___bool__(self)
    def __len__(self): return _npstat.LDoubleVector___len__(self)
    def pop(self): return _npstat.LDoubleVector_pop(self)
    def __getslice__(self, *args): return _npstat.LDoubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _npstat.LDoubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _npstat.LDoubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _npstat.LDoubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _npstat.LDoubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _npstat.LDoubleVector___setitem__(self, *args)
    def append(self, *args): return _npstat.LDoubleVector_append(self, *args)
    def empty(self): return _npstat.LDoubleVector_empty(self)
    def size(self): return _npstat.LDoubleVector_size(self)
    def clear(self): return _npstat.LDoubleVector_clear(self)
    def swap(self, *args): return _npstat.LDoubleVector_swap(self, *args)
    def get_allocator(self): return _npstat.LDoubleVector_get_allocator(self)
    def begin(self): return _npstat.LDoubleVector_begin(self)
    def end(self): return _npstat.LDoubleVector_end(self)
    def rbegin(self): return _npstat.LDoubleVector_rbegin(self)
    def rend(self): return _npstat.LDoubleVector_rend(self)
    def pop_back(self): return _npstat.LDoubleVector_pop_back(self)
    def erase(self, *args): return _npstat.LDoubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _npstat.new_LDoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _npstat.LDoubleVector_push_back(self, *args)
    def front(self): return _npstat.LDoubleVector_front(self)
    def back(self): return _npstat.LDoubleVector_back(self)
    def assign(self, *args): return _npstat.LDoubleVector_assign(self, *args)
    def resize(self, *args): return _npstat.LDoubleVector_resize(self, *args)
    def insert(self, *args): return _npstat.LDoubleVector_insert(self, *args)
    def reserve(self, *args): return _npstat.LDoubleVector_reserve(self, *args)
    def capacity(self): return _npstat.LDoubleVector_capacity(self)
    __swig_destroy__ = _npstat.delete_LDoubleVector
    __del__ = lambda self : None;
LDoubleVector_swigregister = _npstat.LDoubleVector_swigregister
LDoubleVector_swigregister(LDoubleVector)

class CFloatVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CFloatVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CFloatVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _npstat.CFloatVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _npstat.CFloatVector___nonzero__(self)
    def __bool__(self): return _npstat.CFloatVector___bool__(self)
    def __len__(self): return _npstat.CFloatVector___len__(self)
    def pop(self): return _npstat.CFloatVector_pop(self)
    def __getslice__(self, *args): return _npstat.CFloatVector___getslice__(self, *args)
    def __setslice__(self, *args): return _npstat.CFloatVector___setslice__(self, *args)
    def __delslice__(self, *args): return _npstat.CFloatVector___delslice__(self, *args)
    def __delitem__(self, *args): return _npstat.CFloatVector___delitem__(self, *args)
    def __getitem__(self, *args): return _npstat.CFloatVector___getitem__(self, *args)
    def __setitem__(self, *args): return _npstat.CFloatVector___setitem__(self, *args)
    def append(self, *args): return _npstat.CFloatVector_append(self, *args)
    def empty(self): return _npstat.CFloatVector_empty(self)
    def size(self): return _npstat.CFloatVector_size(self)
    def clear(self): return _npstat.CFloatVector_clear(self)
    def swap(self, *args): return _npstat.CFloatVector_swap(self, *args)
    def get_allocator(self): return _npstat.CFloatVector_get_allocator(self)
    def begin(self): return _npstat.CFloatVector_begin(self)
    def end(self): return _npstat.CFloatVector_end(self)
    def rbegin(self): return _npstat.CFloatVector_rbegin(self)
    def rend(self): return _npstat.CFloatVector_rend(self)
    def pop_back(self): return _npstat.CFloatVector_pop_back(self)
    def erase(self, *args): return _npstat.CFloatVector_erase(self, *args)
    def __init__(self, *args): 
        this = _npstat.new_CFloatVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _npstat.CFloatVector_push_back(self, *args)
    def front(self): return _npstat.CFloatVector_front(self)
    def back(self): return _npstat.CFloatVector_back(self)
    def assign(self, *args): return _npstat.CFloatVector_assign(self, *args)
    def resize(self, *args): return _npstat.CFloatVector_resize(self, *args)
    def insert(self, *args): return _npstat.CFloatVector_insert(self, *args)
    def reserve(self, *args): return _npstat.CFloatVector_reserve(self, *args)
    def capacity(self): return _npstat.CFloatVector_capacity(self)
    __swig_destroy__ = _npstat.delete_CFloatVector
    __del__ = lambda self : None;
CFloatVector_swigregister = _npstat.CFloatVector_swigregister
CFloatVector_swigregister(CFloatVector)

class CDoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CDoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CDoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _npstat.CDoubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _npstat.CDoubleVector___nonzero__(self)
    def __bool__(self): return _npstat.CDoubleVector___bool__(self)
    def __len__(self): return _npstat.CDoubleVector___len__(self)
    def pop(self): return _npstat.CDoubleVector_pop(self)
    def __getslice__(self, *args): return _npstat.CDoubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _npstat.CDoubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _npstat.CDoubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _npstat.CDoubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _npstat.CDoubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _npstat.CDoubleVector___setitem__(self, *args)
    def append(self, *args): return _npstat.CDoubleVector_append(self, *args)
    def empty(self): return _npstat.CDoubleVector_empty(self)
    def size(self): return _npstat.CDoubleVector_size(self)
    def clear(self): return _npstat.CDoubleVector_clear(self)
    def swap(self, *args): return _npstat.CDoubleVector_swap(self, *args)
    def get_allocator(self): return _npstat.CDoubleVector_get_allocator(self)
    def begin(self): return _npstat.CDoubleVector_begin(self)
    def end(self): return _npstat.CDoubleVector_end(self)
    def rbegin(self): return _npstat.CDoubleVector_rbegin(self)
    def rend(self): return _npstat.CDoubleVector_rend(self)
    def pop_back(self): return _npstat.CDoubleVector_pop_back(self)
    def erase(self, *args): return _npstat.CDoubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _npstat.new_CDoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _npstat.CDoubleVector_push_back(self, *args)
    def front(self): return _npstat.CDoubleVector_front(self)
    def back(self): return _npstat.CDoubleVector_back(self)
    def assign(self, *args): return _npstat.CDoubleVector_assign(self, *args)
    def resize(self, *args): return _npstat.CDoubleVector_resize(self, *args)
    def insert(self, *args): return _npstat.CDoubleVector_insert(self, *args)
    def reserve(self, *args): return _npstat.CDoubleVector_reserve(self, *args)
    def capacity(self): return _npstat.CDoubleVector_capacity(self)
    __swig_destroy__ = _npstat.delete_CDoubleVector
    __del__ = lambda self : None;
CDoubleVector_swigregister = _npstat.CDoubleVector_swigregister
CDoubleVector_swigregister(CDoubleVector)

class CLDoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CLDoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CLDoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _npstat.CLDoubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _npstat.CLDoubleVector___nonzero__(self)
    def __bool__(self): return _npstat.CLDoubleVector___bool__(self)
    def __len__(self): return _npstat.CLDoubleVector___len__(self)
    def pop(self): return _npstat.CLDoubleVector_pop(self)
    def __getslice__(self, *args): return _npstat.CLDoubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _npstat.CLDoubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _npstat.CLDoubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _npstat.CLDoubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _npstat.CLDoubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _npstat.CLDoubleVector___setitem__(self, *args)
    def append(self, *args): return _npstat.CLDoubleVector_append(self, *args)
    def empty(self): return _npstat.CLDoubleVector_empty(self)
    def size(self): return _npstat.CLDoubleVector_size(self)
    def clear(self): return _npstat.CLDoubleVector_clear(self)
    def swap(self, *args): return _npstat.CLDoubleVector_swap(self, *args)
    def get_allocator(self): return _npstat.CLDoubleVector_get_allocator(self)
    def begin(self): return _npstat.CLDoubleVector_begin(self)
    def end(self): return _npstat.CLDoubleVector_end(self)
    def rbegin(self): return _npstat.CLDoubleVector_rbegin(self)
    def rend(self): return _npstat.CLDoubleVector_rend(self)
    def pop_back(self): return _npstat.CLDoubleVector_pop_back(self)
    def erase(self, *args): return _npstat.CLDoubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _npstat.new_CLDoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _npstat.CLDoubleVector_push_back(self, *args)
    def front(self): return _npstat.CLDoubleVector_front(self)
    def back(self): return _npstat.CLDoubleVector_back(self)
    def assign(self, *args): return _npstat.CLDoubleVector_assign(self, *args)
    def resize(self, *args): return _npstat.CLDoubleVector_resize(self, *args)
    def insert(self, *args): return _npstat.CLDoubleVector_insert(self, *args)
    def reserve(self, *args): return _npstat.CLDoubleVector_reserve(self, *args)
    def capacity(self): return _npstat.CLDoubleVector_capacity(self)
    __swig_destroy__ = _npstat.delete_CLDoubleVector
    __del__ = lambda self : None;
CLDoubleVector_swigregister = _npstat.CLDoubleVector_swigregister
CLDoubleVector_swigregister(CLDoubleVector)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _npstat.StringVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _npstat.StringVector___nonzero__(self)
    def __bool__(self): return _npstat.StringVector___bool__(self)
    def __len__(self): return _npstat.StringVector___len__(self)
    def pop(self): return _npstat.StringVector_pop(self)
    def __getslice__(self, *args): return _npstat.StringVector___getslice__(self, *args)
    def __setslice__(self, *args): return _npstat.StringVector___setslice__(self, *args)
    def __delslice__(self, *args): return _npstat.StringVector___delslice__(self, *args)
    def __delitem__(self, *args): return _npstat.StringVector___delitem__(self, *args)
    def __getitem__(self, *args): return _npstat.StringVector___getitem__(self, *args)
    def __setitem__(self, *args): return _npstat.StringVector___setitem__(self, *args)
    def append(self, *args): return _npstat.StringVector_append(self, *args)
    def empty(self): return _npstat.StringVector_empty(self)
    def size(self): return _npstat.StringVector_size(self)
    def clear(self): return _npstat.StringVector_clear(self)
    def swap(self, *args): return _npstat.StringVector_swap(self, *args)
    def get_allocator(self): return _npstat.StringVector_get_allocator(self)
    def begin(self): return _npstat.StringVector_begin(self)
    def end(self): return _npstat.StringVector_end(self)
    def rbegin(self): return _npstat.StringVector_rbegin(self)
    def rend(self): return _npstat.StringVector_rend(self)
    def pop_back(self): return _npstat.StringVector_pop_back(self)
    def erase(self, *args): return _npstat.StringVector_erase(self, *args)
    def __init__(self, *args): 
        this = _npstat.new_StringVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _npstat.StringVector_push_back(self, *args)
    def front(self): return _npstat.StringVector_front(self)
    def back(self): return _npstat.StringVector_back(self)
    def assign(self, *args): return _npstat.StringVector_assign(self, *args)
    def resize(self, *args): return _npstat.StringVector_resize(self, *args)
    def insert(self, *args): return _npstat.StringVector_insert(self, *args)
    def reserve(self, *args): return _npstat.StringVector_reserve(self, *args)
    def capacity(self): return _npstat.StringVector_capacity(self)
    __swig_destroy__ = _npstat.delete_StringVector
    __del__ = lambda self : None;
StringVector_swigregister = _npstat.StringVector_swigregister
StringVector_swigregister(StringVector)

class IntDoublePair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntDoublePair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntDoublePair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_IntDoublePair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _npstat.IntDoublePair_first_set
    __swig_getmethods__["first"] = _npstat.IntDoublePair_first_get
    if _newclass:first = _swig_property(_npstat.IntDoublePair_first_get, _npstat.IntDoublePair_first_set)
    __swig_setmethods__["second"] = _npstat.IntDoublePair_second_set
    __swig_getmethods__["second"] = _npstat.IntDoublePair_second_get
    if _newclass:second = _swig_property(_npstat.IntDoublePair_second_get, _npstat.IntDoublePair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _npstat.delete_IntDoublePair
    __del__ = lambda self : None;
IntDoublePair_swigregister = _npstat.IntDoublePair_swigregister
IntDoublePair_swigregister(IntDoublePair)

class LLongDoublePair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LLongDoublePair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LLongDoublePair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_LLongDoublePair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _npstat.LLongDoublePair_first_set
    __swig_getmethods__["first"] = _npstat.LLongDoublePair_first_get
    if _newclass:first = _swig_property(_npstat.LLongDoublePair_first_get, _npstat.LLongDoublePair_first_set)
    __swig_setmethods__["second"] = _npstat.LLongDoublePair_second_set
    __swig_getmethods__["second"] = _npstat.LLongDoublePair_second_get
    if _newclass:second = _swig_property(_npstat.LLongDoublePair_second_get, _npstat.LLongDoublePair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _npstat.delete_LLongDoublePair
    __del__ = lambda self : None;
LLongDoublePair_swigregister = _npstat.LLongDoublePair_swigregister
LLongDoublePair_swigregister(LLongDoublePair)

class DoubleDoublePair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleDoublePair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleDoublePair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_DoubleDoublePair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _npstat.DoubleDoublePair_first_set
    __swig_getmethods__["first"] = _npstat.DoubleDoublePair_first_get
    if _newclass:first = _swig_property(_npstat.DoubleDoublePair_first_get, _npstat.DoubleDoublePair_first_set)
    __swig_setmethods__["second"] = _npstat.DoubleDoublePair_second_set
    __swig_getmethods__["second"] = _npstat.DoubleDoublePair_second_get
    if _newclass:second = _swig_property(_npstat.DoubleDoublePair_second_get, _npstat.DoubleDoublePair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _npstat.delete_DoubleDoublePair
    __del__ = lambda self : None;
DoubleDoublePair_swigregister = _npstat.DoubleDoublePair_swigregister
DoubleDoublePair_swigregister(DoubleDoublePair)

class FloatDoublePair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatDoublePair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatDoublePair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_FloatDoublePair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _npstat.FloatDoublePair_first_set
    __swig_getmethods__["first"] = _npstat.FloatDoublePair_first_get
    if _newclass:first = _swig_property(_npstat.FloatDoublePair_first_get, _npstat.FloatDoublePair_first_set)
    __swig_setmethods__["second"] = _npstat.FloatDoublePair_second_set
    __swig_getmethods__["second"] = _npstat.FloatDoublePair_second_get
    if _newclass:second = _swig_property(_npstat.FloatDoublePair_second_get, _npstat.FloatDoublePair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _npstat.delete_FloatDoublePair
    __del__ = lambda self : None;
FloatDoublePair_swigregister = _npstat.FloatDoublePair_swigregister
FloatDoublePair_swigregister(FloatDoublePair)

class FloatFloatPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatFloatPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatFloatPair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_FloatFloatPair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _npstat.FloatFloatPair_first_set
    __swig_getmethods__["first"] = _npstat.FloatFloatPair_first_get
    if _newclass:first = _swig_property(_npstat.FloatFloatPair_first_get, _npstat.FloatFloatPair_first_set)
    __swig_setmethods__["second"] = _npstat.FloatFloatPair_second_set
    __swig_getmethods__["second"] = _npstat.FloatFloatPair_second_get
    if _newclass:second = _swig_property(_npstat.FloatFloatPair_second_get, _npstat.FloatFloatPair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _npstat.delete_FloatFloatPair
    __del__ = lambda self : None;
FloatFloatPair_swigregister = _npstat.FloatFloatPair_swigregister
FloatFloatPair_swigregister(FloatFloatPair)

class StringStringPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringStringPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringStringPair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_StringStringPair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _npstat.StringStringPair_first_set
    __swig_getmethods__["first"] = _npstat.StringStringPair_first_get
    if _newclass:first = _swig_property(_npstat.StringStringPair_first_get, _npstat.StringStringPair_first_set)
    __swig_setmethods__["second"] = _npstat.StringStringPair_second_set
    __swig_getmethods__["second"] = _npstat.StringStringPair_second_get
    if _newclass:second = _swig_property(_npstat.StringStringPair_second_get, _npstat.StringStringPair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _npstat.delete_StringStringPair
    __del__ = lambda self : None;
StringStringPair_swigregister = _npstat.StringStringPair_swigregister
StringStringPair_swigregister(StringStringPair)

class FloatFloatPairVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatFloatPairVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatFloatPairVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _npstat.FloatFloatPairVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _npstat.FloatFloatPairVector___nonzero__(self)
    def __bool__(self): return _npstat.FloatFloatPairVector___bool__(self)
    def __len__(self): return _npstat.FloatFloatPairVector___len__(self)
    def pop(self): return _npstat.FloatFloatPairVector_pop(self)
    def __getslice__(self, *args): return _npstat.FloatFloatPairVector___getslice__(self, *args)
    def __setslice__(self, *args): return _npstat.FloatFloatPairVector___setslice__(self, *args)
    def __delslice__(self, *args): return _npstat.FloatFloatPairVector___delslice__(self, *args)
    def __delitem__(self, *args): return _npstat.FloatFloatPairVector___delitem__(self, *args)
    def __getitem__(self, *args): return _npstat.FloatFloatPairVector___getitem__(self, *args)
    def __setitem__(self, *args): return _npstat.FloatFloatPairVector___setitem__(self, *args)
    def append(self, *args): return _npstat.FloatFloatPairVector_append(self, *args)
    def empty(self): return _npstat.FloatFloatPairVector_empty(self)
    def size(self): return _npstat.FloatFloatPairVector_size(self)
    def clear(self): return _npstat.FloatFloatPairVector_clear(self)
    def swap(self, *args): return _npstat.FloatFloatPairVector_swap(self, *args)
    def get_allocator(self): return _npstat.FloatFloatPairVector_get_allocator(self)
    def begin(self): return _npstat.FloatFloatPairVector_begin(self)
    def end(self): return _npstat.FloatFloatPairVector_end(self)
    def rbegin(self): return _npstat.FloatFloatPairVector_rbegin(self)
    def rend(self): return _npstat.FloatFloatPairVector_rend(self)
    def pop_back(self): return _npstat.FloatFloatPairVector_pop_back(self)
    def erase(self, *args): return _npstat.FloatFloatPairVector_erase(self, *args)
    def __init__(self, *args): 
        this = _npstat.new_FloatFloatPairVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _npstat.FloatFloatPairVector_push_back(self, *args)
    def front(self): return _npstat.FloatFloatPairVector_front(self)
    def back(self): return _npstat.FloatFloatPairVector_back(self)
    def assign(self, *args): return _npstat.FloatFloatPairVector_assign(self, *args)
    def resize(self, *args): return _npstat.FloatFloatPairVector_resize(self, *args)
    def insert(self, *args): return _npstat.FloatFloatPairVector_insert(self, *args)
    def reserve(self, *args): return _npstat.FloatFloatPairVector_reserve(self, *args)
    def capacity(self): return _npstat.FloatFloatPairVector_capacity(self)
    __swig_destroy__ = _npstat.delete_FloatFloatPairVector
    __del__ = lambda self : None;
FloatFloatPairVector_swigregister = _npstat.FloatFloatPairVector_swigregister
FloatFloatPairVector_swigregister(FloatFloatPairVector)

class DoubleDoublePairVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleDoublePairVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleDoublePairVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _npstat.DoubleDoublePairVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _npstat.DoubleDoublePairVector___nonzero__(self)
    def __bool__(self): return _npstat.DoubleDoublePairVector___bool__(self)
    def __len__(self): return _npstat.DoubleDoublePairVector___len__(self)
    def pop(self): return _npstat.DoubleDoublePairVector_pop(self)
    def __getslice__(self, *args): return _npstat.DoubleDoublePairVector___getslice__(self, *args)
    def __setslice__(self, *args): return _npstat.DoubleDoublePairVector___setslice__(self, *args)
    def __delslice__(self, *args): return _npstat.DoubleDoublePairVector___delslice__(self, *args)
    def __delitem__(self, *args): return _npstat.DoubleDoublePairVector___delitem__(self, *args)
    def __getitem__(self, *args): return _npstat.DoubleDoublePairVector___getitem__(self, *args)
    def __setitem__(self, *args): return _npstat.DoubleDoublePairVector___setitem__(self, *args)
    def append(self, *args): return _npstat.DoubleDoublePairVector_append(self, *args)
    def empty(self): return _npstat.DoubleDoublePairVector_empty(self)
    def size(self): return _npstat.DoubleDoublePairVector_size(self)
    def clear(self): return _npstat.DoubleDoublePairVector_clear(self)
    def swap(self, *args): return _npstat.DoubleDoublePairVector_swap(self, *args)
    def get_allocator(self): return _npstat.DoubleDoublePairVector_get_allocator(self)
    def begin(self): return _npstat.DoubleDoublePairVector_begin(self)
    def end(self): return _npstat.DoubleDoublePairVector_end(self)
    def rbegin(self): return _npstat.DoubleDoublePairVector_rbegin(self)
    def rend(self): return _npstat.DoubleDoublePairVector_rend(self)
    def pop_back(self): return _npstat.DoubleDoublePairVector_pop_back(self)
    def erase(self, *args): return _npstat.DoubleDoublePairVector_erase(self, *args)
    def __init__(self, *args): 
        this = _npstat.new_DoubleDoublePairVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _npstat.DoubleDoublePairVector_push_back(self, *args)
    def front(self): return _npstat.DoubleDoublePairVector_front(self)
    def back(self): return _npstat.DoubleDoublePairVector_back(self)
    def assign(self, *args): return _npstat.DoubleDoublePairVector_assign(self, *args)
    def resize(self, *args): return _npstat.DoubleDoublePairVector_resize(self, *args)
    def insert(self, *args): return _npstat.DoubleDoublePairVector_insert(self, *args)
    def reserve(self, *args): return _npstat.DoubleDoublePairVector_reserve(self, *args)
    def capacity(self): return _npstat.DoubleDoublePairVector_capacity(self)
    __swig_destroy__ = _npstat.delete_DoubleDoublePairVector
    __del__ = lambda self : None;
DoubleDoublePairVector_swigregister = _npstat.DoubleDoublePairVector_swigregister
DoubleDoublePairVector_swigregister(DoubleDoublePairVector)

class FloatVectorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FloatVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FloatVectorVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _npstat.FloatVectorVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _npstat.FloatVectorVector___nonzero__(self)
    def __bool__(self): return _npstat.FloatVectorVector___bool__(self)
    def __len__(self): return _npstat.FloatVectorVector___len__(self)
    def pop(self): return _npstat.FloatVectorVector_pop(self)
    def __getslice__(self, *args): return _npstat.FloatVectorVector___getslice__(self, *args)
    def __setslice__(self, *args): return _npstat.FloatVectorVector___setslice__(self, *args)
    def __delslice__(self, *args): return _npstat.FloatVectorVector___delslice__(self, *args)
    def __delitem__(self, *args): return _npstat.FloatVectorVector___delitem__(self, *args)
    def __getitem__(self, *args): return _npstat.FloatVectorVector___getitem__(self, *args)
    def __setitem__(self, *args): return _npstat.FloatVectorVector___setitem__(self, *args)
    def append(self, *args): return _npstat.FloatVectorVector_append(self, *args)
    def empty(self): return _npstat.FloatVectorVector_empty(self)
    def size(self): return _npstat.FloatVectorVector_size(self)
    def clear(self): return _npstat.FloatVectorVector_clear(self)
    def swap(self, *args): return _npstat.FloatVectorVector_swap(self, *args)
    def get_allocator(self): return _npstat.FloatVectorVector_get_allocator(self)
    def begin(self): return _npstat.FloatVectorVector_begin(self)
    def end(self): return _npstat.FloatVectorVector_end(self)
    def rbegin(self): return _npstat.FloatVectorVector_rbegin(self)
    def rend(self): return _npstat.FloatVectorVector_rend(self)
    def pop_back(self): return _npstat.FloatVectorVector_pop_back(self)
    def erase(self, *args): return _npstat.FloatVectorVector_erase(self, *args)
    def __init__(self, *args): 
        this = _npstat.new_FloatVectorVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _npstat.FloatVectorVector_push_back(self, *args)
    def front(self): return _npstat.FloatVectorVector_front(self)
    def back(self): return _npstat.FloatVectorVector_back(self)
    def assign(self, *args): return _npstat.FloatVectorVector_assign(self, *args)
    def resize(self, *args): return _npstat.FloatVectorVector_resize(self, *args)
    def insert(self, *args): return _npstat.FloatVectorVector_insert(self, *args)
    def reserve(self, *args): return _npstat.FloatVectorVector_reserve(self, *args)
    def capacity(self): return _npstat.FloatVectorVector_capacity(self)
    __swig_destroy__ = _npstat.delete_FloatVectorVector
    __del__ = lambda self : None;
FloatVectorVector_swigregister = _npstat.FloatVectorVector_swigregister
FloatVectorVector_swigregister(FloatVectorVector)

class DoubleVectorVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVectorVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVectorVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _npstat.DoubleVectorVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _npstat.DoubleVectorVector___nonzero__(self)
    def __bool__(self): return _npstat.DoubleVectorVector___bool__(self)
    def __len__(self): return _npstat.DoubleVectorVector___len__(self)
    def pop(self): return _npstat.DoubleVectorVector_pop(self)
    def __getslice__(self, *args): return _npstat.DoubleVectorVector___getslice__(self, *args)
    def __setslice__(self, *args): return _npstat.DoubleVectorVector___setslice__(self, *args)
    def __delslice__(self, *args): return _npstat.DoubleVectorVector___delslice__(self, *args)
    def __delitem__(self, *args): return _npstat.DoubleVectorVector___delitem__(self, *args)
    def __getitem__(self, *args): return _npstat.DoubleVectorVector___getitem__(self, *args)
    def __setitem__(self, *args): return _npstat.DoubleVectorVector___setitem__(self, *args)
    def append(self, *args): return _npstat.DoubleVectorVector_append(self, *args)
    def empty(self): return _npstat.DoubleVectorVector_empty(self)
    def size(self): return _npstat.DoubleVectorVector_size(self)
    def clear(self): return _npstat.DoubleVectorVector_clear(self)
    def swap(self, *args): return _npstat.DoubleVectorVector_swap(self, *args)
    def get_allocator(self): return _npstat.DoubleVectorVector_get_allocator(self)
    def begin(self): return _npstat.DoubleVectorVector_begin(self)
    def end(self): return _npstat.DoubleVectorVector_end(self)
    def rbegin(self): return _npstat.DoubleVectorVector_rbegin(self)
    def rend(self): return _npstat.DoubleVectorVector_rend(self)
    def pop_back(self): return _npstat.DoubleVectorVector_pop_back(self)
    def erase(self, *args): return _npstat.DoubleVectorVector_erase(self, *args)
    def __init__(self, *args): 
        this = _npstat.new_DoubleVectorVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _npstat.DoubleVectorVector_push_back(self, *args)
    def front(self): return _npstat.DoubleVectorVector_front(self)
    def back(self): return _npstat.DoubleVectorVector_back(self)
    def assign(self, *args): return _npstat.DoubleVectorVector_assign(self, *args)
    def resize(self, *args): return _npstat.DoubleVectorVector_resize(self, *args)
    def insert(self, *args): return _npstat.DoubleVectorVector_insert(self, *args)
    def reserve(self, *args): return _npstat.DoubleVectorVector_reserve(self, *args)
    def capacity(self): return _npstat.DoubleVectorVector_capacity(self)
    __swig_destroy__ = _npstat.delete_DoubleVectorVector
    __del__ = lambda self : None;
DoubleVectorVector_swigregister = _npstat.DoubleVectorVector_swigregister
DoubleVectorVector_swigregister(DoubleVectorVector)

class ios_base(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios_base, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ios_base, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _npstat.ios_base_erase_event
    imbue_event = _npstat.ios_base_imbue_event
    copyfmt_event = _npstat.ios_base_copyfmt_event
    def register_callback(self, *args): return _npstat.ios_base_register_callback(self, *args)
    def flags(self, *args): return _npstat.ios_base_flags(self, *args)
    def setf(self, *args): return _npstat.ios_base_setf(self, *args)
    def unsetf(self, *args): return _npstat.ios_base_unsetf(self, *args)
    def precision(self, *args): return _npstat.ios_base_precision(self, *args)
    def width(self, *args): return _npstat.ios_base_width(self, *args)
    __swig_getmethods__["sync_with_stdio"] = lambda x: _npstat.ios_base_sync_with_stdio
    if _newclass:sync_with_stdio = staticmethod(_npstat.ios_base_sync_with_stdio)
    def imbue(self, *args): return _npstat.ios_base_imbue(self, *args)
    def getloc(self): return _npstat.ios_base_getloc(self)
    __swig_getmethods__["xalloc"] = lambda x: _npstat.ios_base_xalloc
    if _newclass:xalloc = staticmethod(_npstat.ios_base_xalloc)
    def iword(self, *args): return _npstat.ios_base_iword(self, *args)
    def pword(self, *args): return _npstat.ios_base_pword(self, *args)
    __swig_destroy__ = _npstat.delete_ios_base
    __del__ = lambda self : None;
ios_base_swigregister = _npstat.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _npstat.cvar
ios_base.boolalpha = _npstat.cvar.ios_base_boolalpha
ios_base.dec = _npstat.cvar.ios_base_dec
ios_base.fixed = _npstat.cvar.ios_base_fixed
ios_base.hex = _npstat.cvar.ios_base_hex
ios_base.internal = _npstat.cvar.ios_base_internal
ios_base.left = _npstat.cvar.ios_base_left
ios_base.oct = _npstat.cvar.ios_base_oct
ios_base.right = _npstat.cvar.ios_base_right
ios_base.scientific = _npstat.cvar.ios_base_scientific
ios_base.showbase = _npstat.cvar.ios_base_showbase
ios_base.showpoint = _npstat.cvar.ios_base_showpoint
ios_base.showpos = _npstat.cvar.ios_base_showpos
ios_base.skipws = _npstat.cvar.ios_base_skipws
ios_base.unitbuf = _npstat.cvar.ios_base_unitbuf
ios_base.uppercase = _npstat.cvar.ios_base_uppercase
ios_base.adjustfield = _npstat.cvar.ios_base_adjustfield
ios_base.basefield = _npstat.cvar.ios_base_basefield
ios_base.floatfield = _npstat.cvar.ios_base_floatfield
ios_base.badbit = _npstat.cvar.ios_base_badbit
ios_base.eofbit = _npstat.cvar.ios_base_eofbit
ios_base.failbit = _npstat.cvar.ios_base_failbit
ios_base.goodbit = _npstat.cvar.ios_base_goodbit
ios_base.app = _npstat.cvar.ios_base_app
ios_base.ate = _npstat.cvar.ios_base_ate
ios_base.binary = _npstat.cvar.ios_base_binary
ios_base.ios_base_in = _npstat.cvar.ios_base_ios_base_in
ios_base.out = _npstat.cvar.ios_base_out
ios_base.trunc = _npstat.cvar.ios_base_trunc
ios_base.beg = _npstat.cvar.ios_base_beg
ios_base.cur = _npstat.cvar.ios_base_cur
ios_base.end = _npstat.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync=True):
  return _npstat.ios_base_sync_with_stdio(__sync)
ios_base_sync_with_stdio = _npstat.ios_base_sync_with_stdio

def ios_base_xalloc():
  return _npstat.ios_base_xalloc()
ios_base_xalloc = _npstat.ios_base_xalloc

class ios(ios_base):
    __swig_setmethods__ = {}
    for _s in [ios_base]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ios, name, value)
    __swig_getmethods__ = {}
    for _s in [ios_base]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ios, name)
    __repr__ = _swig_repr
    def rdstate(self): return _npstat.ios_rdstate(self)
    def clear(self, *args): return _npstat.ios_clear(self, *args)
    def setstate(self, *args): return _npstat.ios_setstate(self, *args)
    def good(self): return _npstat.ios_good(self)
    def eof(self): return _npstat.ios_eof(self)
    def fail(self): return _npstat.ios_fail(self)
    def bad(self): return _npstat.ios_bad(self)
    def exceptions(self, *args): return _npstat.ios_exceptions(self, *args)
    def __init__(self, *args): 
        this = _npstat.new_ios(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_ios
    __del__ = lambda self : None;
    def tie(self, *args): return _npstat.ios_tie(self, *args)
    def rdbuf(self, *args): return _npstat.ios_rdbuf(self, *args)
    def copyfmt(self, *args): return _npstat.ios_copyfmt(self, *args)
    def fill(self, *args): return _npstat.ios_fill(self, *args)
    def imbue(self, *args): return _npstat.ios_imbue(self, *args)
    def narrow(self, *args): return _npstat.ios_narrow(self, *args)
    def widen(self, *args): return _npstat.ios_widen(self, *args)
ios_swigregister = _npstat.ios_swigregister
ios_swigregister(ios)

class ostream(ios):
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ostream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_ostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_ostream
    __del__ = lambda self : None;
    def __lshift__(self, *args): return _npstat.ostream___lshift__(self, *args)
    def put(self, *args): return _npstat.ostream_put(self, *args)
    def write(self, *args): return _npstat.ostream_write(self, *args)
    def flush(self): return _npstat.ostream_flush(self)
    def tellp(self): return _npstat.ostream_tellp(self)
    def seekp(self, *args): return _npstat.ostream_seekp(self, *args)
ostream_swigregister = _npstat.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    __swig_setmethods__ = {}
    for _s in [ios]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, istream, name, value)
    __swig_getmethods__ = {}
    for _s in [ios]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, istream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_istream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_istream
    __del__ = lambda self : None;
    def __rshift__(self, *args): return _npstat.istream___rshift__(self, *args)
    def gcount(self): return _npstat.istream_gcount(self)
    def get(self, *args): return _npstat.istream_get(self, *args)
    def getline(self, *args): return _npstat.istream_getline(self, *args)
    def ignore(self, *args): return _npstat.istream_ignore(self, *args)
    def peek(self): return _npstat.istream_peek(self)
    def read(self, *args): return _npstat.istream_read(self, *args)
    def readsome(self, *args): return _npstat.istream_readsome(self, *args)
    def putback(self, *args): return _npstat.istream_putback(self, *args)
    def unget(self): return _npstat.istream_unget(self)
    def sync(self): return _npstat.istream_sync(self)
    def tellg(self): return _npstat.istream_tellg(self)
    def seekg(self, *args): return _npstat.istream_seekg(self, *args)
istream_swigregister = _npstat.istream_swigregister
istream_swigregister(istream)

class iostream(istream,ostream):
    __swig_setmethods__ = {}
    for _s in [istream,ostream]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iostream, name, value)
    __swig_getmethods__ = {}
    for _s in [istream,ostream]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iostream, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_iostream(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_iostream
    __del__ = lambda self : None;
iostream_swigregister = _npstat.iostream_swigregister
iostream_swigregister(iostream)

endl_cb_ptr = _npstat.endl_cb_ptr

def endl(*args):
  return _npstat.endl(*args)
endl = _npstat.endl
ends_cb_ptr = _npstat.ends_cb_ptr

def ends(*args):
  return _npstat.ends(*args)
ends = _npstat.ends
flush_cb_ptr = _npstat.flush_cb_ptr

def flush(*args):
  return _npstat.flush(*args)
flush = _npstat.flush
class ClassId(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClassId, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClassId, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_ClassId(*args)
        try: self.this.append(this)
        except: self.this = this
    def name(self): return _npstat.ClassId_name(self)
    def version(self): return _npstat.ClassId_version(self)
    def isPointer(self): return _npstat.ClassId_isPointer(self)
    def id(self): return _npstat.ClassId_id(self)
    def isTemplate(self): return _npstat.ClassId_isTemplate(self)
    def write(self, *args): return _npstat.ClassId_write(self, *args)
    def __eq__(self, *args): return _npstat.ClassId___eq__(self, *args)
    def __ne__(self, *args): return _npstat.ClassId___ne__(self, *args)
    def __lt__(self, *args): return _npstat.ClassId___lt__(self, *args)
    def __gt__(self, *args): return _npstat.ClassId___gt__(self, *args)
    def setVersion(self, *args): return _npstat.ClassId_setVersion(self, *args)
    def ensureSameId(self, *args): return _npstat.ClassId_ensureSameId(self, *args)
    def ensureSameName(self, *args): return _npstat.ClassId_ensureSameName(self, *args)
    def ensureSameVersion(self, *args): return _npstat.ClassId_ensureSameVersion(self, *args)
    def ensureVersionInRange(self, *args): return _npstat.ClassId_ensureVersionInRange(self, *args)
    __swig_getmethods__["invalidId"] = lambda x: _npstat.ClassId_invalidId
    if _newclass:invalidId = staticmethod(_npstat.ClassId_invalidId)
    __swig_destroy__ = _npstat.delete_ClassId
    __del__ = lambda self : None;
ClassId_swigregister = _npstat.ClassId_swigregister
ClassId_swigregister(ClassId)

def ClassId_invalidId():
  return _npstat.ClassId_invalidId()
ClassId_invalidId = _npstat.ClassId_invalidId

class SameClassId(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SameClassId, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SameClassId, name)
    __repr__ = _swig_repr
    __swig_getmethods__["compatible"] = lambda x: _npstat.SameClassId_compatible
    if _newclass:compatible = staticmethod(_npstat.SameClassId_compatible)
    def __init__(self): 
        this = _npstat.new_SameClassId()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_SameClassId
    __del__ = lambda self : None;
SameClassId_swigregister = _npstat.SameClassId_swigregister
SameClassId_swigregister(SameClassId)

def SameClassId_compatible(*args):
  return _npstat.SameClassId_compatible(*args)
SameClassId_compatible = _npstat.SameClassId_compatible

class SameClassName(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SameClassName, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SameClassName, name)
    __repr__ = _swig_repr
    __swig_getmethods__["compatible"] = lambda x: _npstat.SameClassName_compatible
    if _newclass:compatible = staticmethod(_npstat.SameClassName_compatible)
    def __init__(self): 
        this = _npstat.new_SameClassName()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_SameClassName
    __del__ = lambda self : None;
SameClassName_swigregister = _npstat.SameClassName_swigregister
SameClassName_swigregister(SameClassName)

def SameClassName_compatible(*args):
  return _npstat.SameClassName_compatible(*args)
SameClassName_compatible = _npstat.SameClassName_compatible

class ItemDescriptor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ItemDescriptor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ItemDescriptor, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_ItemDescriptor(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_ItemDescriptor
    __del__ = lambda self : None;
    def type(self): return _npstat.ItemDescriptor_type(self)
    def ioPrototype(self): return _npstat.ItemDescriptor_ioPrototype(self)
    def name(self): return _npstat.ItemDescriptor_name(self)
    def category(self): return _npstat.ItemDescriptor_category(self)
    def nameAndCategory(self): return _npstat.ItemDescriptor_nameAndCategory(self)
    def __eq__(self, *args): return _npstat.ItemDescriptor___eq__(self, *args)
    def __ne__(self, *args): return _npstat.ItemDescriptor___ne__(self, *args)
    def isSameClassIdandIO(self, *args): return _npstat.ItemDescriptor_isSameClassIdandIO(self, *args)
    def isSameIOPrototype(self, *args): return _npstat.ItemDescriptor_isSameIOPrototype(self, *args)
ItemDescriptor_swigregister = _npstat.ItemDescriptor_swigregister
ItemDescriptor_swigregister(ItemDescriptor)

class AbsRecord(ItemDescriptor):
    __swig_setmethods__ = {}
    for _s in [ItemDescriptor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbsRecord, name, value)
    __swig_getmethods__ = {}
    for _s in [ItemDescriptor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, AbsRecord, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _npstat.delete_AbsRecord
    __del__ = lambda self : None;
    def id(self): return _npstat.AbsRecord_id(self)
    def itemLength(self): return _npstat.AbsRecord_itemLength(self)
AbsRecord_swigregister = _npstat.AbsRecord_swigregister
AbsRecord_swigregister(AbsRecord)

class SearchSpecifier(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SearchSpecifier, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SearchSpecifier, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_SearchSpecifier(*args)
        try: self.this.append(this)
        except: self.this = this
    def useRegex(self): return _npstat.SearchSpecifier_useRegex(self)
    def pattern(self): return _npstat.SearchSpecifier_pattern(self)
    def matches(self, *args): return _npstat.SearchSpecifier_matches(self, *args)
    __swig_destroy__ = _npstat.delete_SearchSpecifier
    __del__ = lambda self : None;
SearchSpecifier_swigregister = _npstat.SearchSpecifier_swigregister
SearchSpecifier_swigregister(SearchSpecifier)

class AbsReference(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbsReference, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbsReference, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _npstat.delete_AbsReference
    __del__ = lambda self : None;
    def archive(self): return _npstat.AbsReference_archive(self)
    def type(self): return _npstat.AbsReference_type(self)
    def ioPrototype(self): return _npstat.AbsReference_ioPrototype(self)
    def namePattern(self): return _npstat.AbsReference_namePattern(self)
    def categoryPattern(self): return _npstat.AbsReference_categoryPattern(self)
    def isIOCompatible(self, *args): return _npstat.AbsReference_isIOCompatible(self, *args)
    def isSameIOPrototype(self, *args): return _npstat.AbsReference_isSameIOPrototype(self, *args)
    def empty(self): return _npstat.AbsReference_empty(self)
    def unique(self): return _npstat.AbsReference_unique(self)
    def size(self): return _npstat.AbsReference_size(self)
    def id(self, *args): return _npstat.AbsReference_id(self, *args)
    def indexedCatalogEntry(self, *args): return _npstat.AbsReference_indexedCatalogEntry(self, *args)
AbsReference_swigregister = _npstat.AbsReference_swigregister
AbsReference_swigregister(AbsReference)

class AbsRandomGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbsRandomGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbsRandomGenerator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _npstat.delete_AbsRandomGenerator
    __del__ = lambda self : None;
    def dim(self): return _npstat.AbsRandomGenerator_dim(self)
    def maxPoints(self): return _npstat.AbsRandomGenerator_maxPoints(self)
    def __call__(self): return _npstat.AbsRandomGenerator___call__(self)
    def run(self, *args): return _npstat.AbsRandomGenerator_run(self, *args)
    def generate(self, *args): return _npstat.AbsRandomGenerator_generate(self, *args)
AbsRandomGenerator_swigregister = _npstat.AbsRandomGenerator_swigregister
AbsRandomGenerator_swigregister(AbsRandomGenerator)

class WrappedRandomGen(AbsRandomGenerator):
    __swig_setmethods__ = {}
    for _s in [AbsRandomGenerator]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WrappedRandomGen, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsRandomGenerator]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WrappedRandomGen, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_WrappedRandomGen(*args)
        try: self.this.append(this)
        except: self.this = this
    def dim(self): return _npstat.WrappedRandomGen_dim(self)
    def __call__(self): return _npstat.WrappedRandomGen___call__(self)
    __swig_destroy__ = _npstat.delete_WrappedRandomGen
    __del__ = lambda self : None;
WrappedRandomGen_swigregister = _npstat.WrappedRandomGen_swigregister
WrappedRandomGen_swigregister(WrappedRandomGen)

class AbsDiscreteDistribution1D(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbsDiscreteDistribution1D, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbsDiscreteDistribution1D, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _npstat.delete_AbsDiscreteDistribution1D
    __del__ = lambda self : None;
    def probability(self, *args): return _npstat.AbsDiscreteDistribution1D_probability(self, *args)
    def cdf(self, *args): return _npstat.AbsDiscreteDistribution1D_cdf(self, *args)
    def exceedance(self, *args): return _npstat.AbsDiscreteDistribution1D_exceedance(self, *args)
    def quantile(self, *args): return _npstat.AbsDiscreteDistribution1D_quantile(self, *args)
    def __eq__(self, *args): return _npstat.AbsDiscreteDistribution1D___eq__(self, *args)
    def __ne__(self, *args): return _npstat.AbsDiscreteDistribution1D___ne__(self, *args)
    def clone(self): return _npstat.AbsDiscreteDistribution1D_clone(self)
    def classId(self): return _npstat.AbsDiscreteDistribution1D_classId(self)
    def write(self, *args): return _npstat.AbsDiscreteDistribution1D_write(self, *args)
    __swig_getmethods__["classname"] = lambda x: _npstat.AbsDiscreteDistribution1D_classname
    if _newclass:classname = staticmethod(_npstat.AbsDiscreteDistribution1D_classname)
    __swig_getmethods__["version"] = lambda x: _npstat.AbsDiscreteDistribution1D_version
    if _newclass:version = staticmethod(_npstat.AbsDiscreteDistribution1D_version)
    __swig_getmethods__["read"] = lambda x: _npstat.AbsDiscreteDistribution1D_read
    if _newclass:read = staticmethod(_npstat.AbsDiscreteDistribution1D_read)
    def random(self, *args): return _npstat.AbsDiscreteDistribution1D_random(self, *args)
    def generate(self, *args): return _npstat.AbsDiscreteDistribution1D_generate(self, *args)
AbsDiscreteDistribution1D_swigregister = _npstat.AbsDiscreteDistribution1D_swigregister
AbsDiscreteDistribution1D_swigregister(AbsDiscreteDistribution1D)

def AbsDiscreteDistribution1D_classname():
  return _npstat.AbsDiscreteDistribution1D_classname()
AbsDiscreteDistribution1D_classname = _npstat.AbsDiscreteDistribution1D_classname

def AbsDiscreteDistribution1D_version():
  return _npstat.AbsDiscreteDistribution1D_version()
AbsDiscreteDistribution1D_version = _npstat.AbsDiscreteDistribution1D_version

def AbsDiscreteDistribution1D_read(*args):
  return _npstat.AbsDiscreteDistribution1D_read(*args)
AbsDiscreteDistribution1D_read = _npstat.AbsDiscreteDistribution1D_read

class ShiftableDiscreteDistribution1D(AbsDiscreteDistribution1D):
    __swig_setmethods__ = {}
    for _s in [AbsDiscreteDistribution1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ShiftableDiscreteDistribution1D, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsDiscreteDistribution1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ShiftableDiscreteDistribution1D, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _npstat.delete_ShiftableDiscreteDistribution1D
    __del__ = lambda self : None;
    def location(self): return _npstat.ShiftableDiscreteDistribution1D_location(self)
    def setLocation(self, *args): return _npstat.ShiftableDiscreteDistribution1D_setLocation(self, *args)
    def probability(self, *args): return _npstat.ShiftableDiscreteDistribution1D_probability(self, *args)
    def cdf(self, *args): return _npstat.ShiftableDiscreteDistribution1D_cdf(self, *args)
    def exceedance(self, *args): return _npstat.ShiftableDiscreteDistribution1D_exceedance(self, *args)
    def quantile(self, *args): return _npstat.ShiftableDiscreteDistribution1D_quantile(self, *args)
    def clone(self): return _npstat.ShiftableDiscreteDistribution1D_clone(self)
    def classId(self): return _npstat.ShiftableDiscreteDistribution1D_classId(self)
ShiftableDiscreteDistribution1D_swigregister = _npstat.ShiftableDiscreteDistribution1D_swigregister
ShiftableDiscreteDistribution1D_swigregister(ShiftableDiscreteDistribution1D)

class ArchiveRecord_AbsDiscreteDistribution1D(AbsRecord):
    __swig_setmethods__ = {}
    for _s in [AbsRecord]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArchiveRecord_AbsDiscreteDistribution1D, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsRecord]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArchiveRecord_AbsDiscreteDistribution1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_ArchiveRecord_AbsDiscreteDistribution1D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_ArchiveRecord_AbsDiscreteDistribution1D
    __del__ = lambda self : None;
ArchiveRecord_AbsDiscreteDistribution1D_swigregister = _npstat.ArchiveRecord_AbsDiscreteDistribution1D_swigregister
ArchiveRecord_AbsDiscreteDistribution1D_swigregister(ArchiveRecord_AbsDiscreteDistribution1D)

class DiscreteTabulated1D(ShiftableDiscreteDistribution1D):
    __swig_setmethods__ = {}
    for _s in [ShiftableDiscreteDistribution1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DiscreteTabulated1D, name, value)
    __swig_getmethods__ = {}
    for _s in [ShiftableDiscreteDistribution1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DiscreteTabulated1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_DiscreteTabulated1D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_DiscreteTabulated1D
    __del__ = lambda self : None;
    def clone(self): return _npstat.DiscreteTabulated1D_clone(self)
    def probabilities(self): return _npstat.DiscreteTabulated1D_probabilities(self)
    def classId(self): return _npstat.DiscreteTabulated1D_classId(self)
    def write(self, *args): return _npstat.DiscreteTabulated1D_write(self, *args)
    __swig_getmethods__["classname"] = lambda x: _npstat.DiscreteTabulated1D_classname
    if _newclass:classname = staticmethod(_npstat.DiscreteTabulated1D_classname)
    __swig_getmethods__["version"] = lambda x: _npstat.DiscreteTabulated1D_version
    if _newclass:version = staticmethod(_npstat.DiscreteTabulated1D_version)
    __swig_getmethods__["read"] = lambda x: _npstat.DiscreteTabulated1D_read
    if _newclass:read = staticmethod(_npstat.DiscreteTabulated1D_read)
DiscreteTabulated1D_swigregister = _npstat.DiscreteTabulated1D_swigregister
DiscreteTabulated1D_swigregister(DiscreteTabulated1D)

def DiscreteTabulated1D_classname():
  return _npstat.DiscreteTabulated1D_classname()
DiscreteTabulated1D_classname = _npstat.DiscreteTabulated1D_classname

def DiscreteTabulated1D_version():
  return _npstat.DiscreteTabulated1D_version()
DiscreteTabulated1D_version = _npstat.DiscreteTabulated1D_version

def DiscreteTabulated1D_read(*args):
  return _npstat.DiscreteTabulated1D_read(*args)
DiscreteTabulated1D_read = _npstat.DiscreteTabulated1D_read

class Poisson1D(AbsDiscreteDistribution1D):
    __swig_setmethods__ = {}
    for _s in [AbsDiscreteDistribution1D]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Poisson1D, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsDiscreteDistribution1D]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Poisson1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_Poisson1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def clone(self): return _npstat.Poisson1D_clone(self)
    __swig_destroy__ = _npstat.delete_Poisson1D
    __del__ = lambda self : None;
    def mean(self): return _npstat.Poisson1D_mean(self)
    def probability(self, *args): return _npstat.Poisson1D_probability(self, *args)
    def cdf(self, *args): return _npstat.Poisson1D_cdf(self, *args)
    def exceedance(self, *args): return _npstat.Poisson1D_exceedance(self, *args)
    def quantile(self, *args): return _npstat.Poisson1D_quantile(self, *args)
    def classId(self): return _npstat.Poisson1D_classId(self)
    def write(self, *args): return _npstat.Poisson1D_write(self, *args)
    __swig_getmethods__["classname"] = lambda x: _npstat.Poisson1D_classname
    if _newclass:classname = staticmethod(_npstat.Poisson1D_classname)
    __swig_getmethods__["version"] = lambda x: _npstat.Poisson1D_version
    if _newclass:version = staticmethod(_npstat.Poisson1D_version)
    __swig_getmethods__["read"] = lambda x: _npstat.Poisson1D_read
    if _newclass:read = staticmethod(_npstat.Poisson1D_read)
Poisson1D_swigregister = _npstat.Poisson1D_swigregister
Poisson1D_swigregister(Poisson1D)

def Poisson1D_classname():
  return _npstat.Poisson1D_classname()
Poisson1D_classname = _npstat.Poisson1D_classname

def Poisson1D_version():
  return _npstat.Poisson1D_version()
Poisson1D_version = _npstat.Poisson1D_version

def Poisson1D_read(*args):
  return _npstat.Poisson1D_read(*args)
Poisson1D_read = _npstat.Poisson1D_read

class ArchiveRecord_DiscreteTabulated1D(AbsRecord):
    __swig_setmethods__ = {}
    for _s in [AbsRecord]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArchiveRecord_DiscreteTabulated1D, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsRecord]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArchiveRecord_DiscreteTabulated1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_ArchiveRecord_DiscreteTabulated1D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_ArchiveRecord_DiscreteTabulated1D
    __del__ = lambda self : None;
ArchiveRecord_DiscreteTabulated1D_swigregister = _npstat.ArchiveRecord_DiscreteTabulated1D_swigregister
ArchiveRecord_DiscreteTabulated1D_swigregister(ArchiveRecord_DiscreteTabulated1D)

class Ref_DiscreteTabulated1D(AbsReference):
    __swig_setmethods__ = {}
    for _s in [AbsReference]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ref_DiscreteTabulated1D, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsReference]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ref_DiscreteTabulated1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_Ref_DiscreteTabulated1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def restore(self, *args): return _npstat.Ref_DiscreteTabulated1D_restore(self, *args)
    def retrieve(self, *args): return _npstat.Ref_DiscreteTabulated1D_retrieve(self, *args)
    def getValue(self, *args): return _npstat.Ref_DiscreteTabulated1D_getValue(self, *args)
    __swig_destroy__ = _npstat.delete_Ref_DiscreteTabulated1D
    __del__ = lambda self : None;
Ref_DiscreteTabulated1D_swigregister = _npstat.Ref_DiscreteTabulated1D_swigregister
Ref_DiscreteTabulated1D_swigregister(Ref_DiscreteTabulated1D)

class ArchiveRecord_Poisson1D(AbsRecord):
    __swig_setmethods__ = {}
    for _s in [AbsRecord]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArchiveRecord_Poisson1D, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsRecord]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArchiveRecord_Poisson1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_ArchiveRecord_Poisson1D(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_ArchiveRecord_Poisson1D
    __del__ = lambda self : None;
ArchiveRecord_Poisson1D_swigregister = _npstat.ArchiveRecord_Poisson1D_swigregister
ArchiveRecord_Poisson1D_swigregister(ArchiveRecord_Poisson1D)

class Ref_Poisson1D(AbsReference):
    __swig_setmethods__ = {}
    for _s in [AbsReference]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ref_Poisson1D, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsReference]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ref_Poisson1D, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_Ref_Poisson1D(*args)
        try: self.this.append(this)
        except: self.this = this
    def restore(self, *args): return _npstat.Ref_Poisson1D_restore(self, *args)
    def retrieve(self, *args): return _npstat.Ref_Poisson1D_retrieve(self, *args)
    def getValue(self, *args): return _npstat.Ref_Poisson1D_getValue(self, *args)
    __swig_destroy__ = _npstat.delete_Ref_Poisson1D
    __del__ = lambda self : None;
Ref_Poisson1D_swigregister = _npstat.Ref_Poisson1D_swigregister
Ref_Poisson1D_swigregister(Ref_Poisson1D)

class ItemLocation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ItemLocation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ItemLocation, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_ItemLocation(*args)
        try: self.this.append(this)
        except: self.this = this
    def URI(self): return _npstat.ItemLocation_URI(self)
    def cachedItemURI(self): return _npstat.ItemLocation_cachedItemURI(self)
    def setURI(self, *args): return _npstat.ItemLocation_setURI(self, *args)
    def setCachedItemURI(self, *args): return _npstat.ItemLocation_setCachedItemURI(self, *args)
    def __eq__(self, *args): return _npstat.ItemLocation___eq__(self, *args)
    def __ne__(self, *args): return _npstat.ItemLocation___ne__(self, *args)
    def classId(self): return _npstat.ItemLocation_classId(self)
    def write(self, *args): return _npstat.ItemLocation_write(self, *args)
    __swig_getmethods__["classname"] = lambda x: _npstat.ItemLocation_classname
    if _newclass:classname = staticmethod(_npstat.ItemLocation_classname)
    __swig_getmethods__["version"] = lambda x: _npstat.ItemLocation_version
    if _newclass:version = staticmethod(_npstat.ItemLocation_version)
    __swig_getmethods__["read"] = lambda x: _npstat.ItemLocation_read
    if _newclass:read = staticmethod(_npstat.ItemLocation_read)
    def streamPos(self): return _npstat.ItemLocation_streamPos(self)
    def setStreamPos(self, *args): return _npstat.ItemLocation_setStreamPos(self, *args)
    __swig_destroy__ = _npstat.delete_ItemLocation
    __del__ = lambda self : None;
ItemLocation_swigregister = _npstat.ItemLocation_swigregister
ItemLocation_swigregister(ItemLocation)

def ItemLocation_classname():
  return _npstat.ItemLocation_classname()
ItemLocation_classname = _npstat.ItemLocation_classname

def ItemLocation_version():
  return _npstat.ItemLocation_version()
ItemLocation_version = _npstat.ItemLocation_version

def ItemLocation_read(*args):
  return _npstat.ItemLocation_read(*args)
ItemLocation_read = _npstat.ItemLocation_read

class CatalogEntry(ItemDescriptor):
    __swig_setmethods__ = {}
    for _s in [ItemDescriptor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CatalogEntry, name, value)
    __swig_getmethods__ = {}
    for _s in [ItemDescriptor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CatalogEntry, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_CatalogEntry(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_CatalogEntry
    __del__ = lambda self : None;
    def id(self): return _npstat.CatalogEntry_id(self)
    def offset(self): return _npstat.CatalogEntry_offset(self)
    def location(self): return _npstat.CatalogEntry_location(self)
    def itemLength(self): return _npstat.CatalogEntry_itemLength(self)
    def compressionCode(self): return _npstat.CatalogEntry_compressionCode(self)
    def setStreamPosition(self, *args): return _npstat.CatalogEntry_setStreamPosition(self, *args)
    def setURI(self, *args): return _npstat.CatalogEntry_setURI(self, *args)
    def setCachedItemURI(self, *args): return _npstat.CatalogEntry_setCachedItemURI(self, *args)
    def setOffset(self, *args): return _npstat.CatalogEntry_setOffset(self, *args)
    def humanReadable(self, *args): return _npstat.CatalogEntry_humanReadable(self, *args)
    def classId(self): return _npstat.CatalogEntry_classId(self)
    def write(self, *args): return _npstat.CatalogEntry_write(self, *args)
    __swig_getmethods__["classname"] = lambda x: _npstat.CatalogEntry_classname
    if _newclass:classname = staticmethod(_npstat.CatalogEntry_classname)
    __swig_getmethods__["version"] = lambda x: _npstat.CatalogEntry_version
    if _newclass:version = staticmethod(_npstat.CatalogEntry_version)
    __swig_getmethods__["read"] = lambda x: _npstat.CatalogEntry_read
    if _newclass:read = staticmethod(_npstat.CatalogEntry_read)
CatalogEntry_swigregister = _npstat.CatalogEntry_swigregister
CatalogEntry_swigregister(CatalogEntry)

def CatalogEntry_classname():
  return _npstat.CatalogEntry_classname()
CatalogEntry_classname = _npstat.CatalogEntry_classname

def CatalogEntry_version():
  return _npstat.CatalogEntry_version()
CatalogEntry_version = _npstat.CatalogEntry_version

def CatalogEntry_read(*args):
  return _npstat.CatalogEntry_read(*args)
CatalogEntry_read = _npstat.CatalogEntry_read

class AbsArchive(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, AbsArchive, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, AbsArchive, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _npstat.delete_AbsArchive
    __del__ = lambda self : None;
    def name(self): return _npstat.AbsArchive_name(self)
    def isOpen(self): return _npstat.AbsArchive_isOpen(self)
    def error(self): return _npstat.AbsArchive_error(self)
    def isReadable(self): return _npstat.AbsArchive_isReadable(self)
    def isWritable(self): return _npstat.AbsArchive_isWritable(self)
    def size(self): return _npstat.AbsArchive_size(self)
    def smallestId(self): return _npstat.AbsArchive_smallestId(self)
    def largestId(self): return _npstat.AbsArchive_largestId(self)
    def idsAreContiguous(self): return _npstat.AbsArchive_idsAreContiguous(self)
    def itemExists(self, *args): return _npstat.AbsArchive_itemExists(self, *args)
    def itemSearch(self, *args): return _npstat.AbsArchive_itemSearch(self, *args)
    def flush(self): return _npstat.AbsArchive_flush(self)
    def copyItem(self, *args): return _npstat.AbsArchive_copyItem(self, *args)
    def lastItemId(self): return _npstat.AbsArchive_lastItemId(self)
    def lastItemLength(self): return _npstat.AbsArchive_lastItemLength(self)
    def __eq__(self, *args): return _npstat.AbsArchive___eq__(self, *args)
    def __ne__(self, *args): return _npstat.AbsArchive___ne__(self, *args)
    def store(self, *args): return _npstat.AbsArchive_store(self, *args)
    def findItems(self, *args): return _npstat.AbsArchive_findItems(self, *args)
    def getCatalogEntry(self, *args): return _npstat.AbsArchive_getCatalogEntry(self, *args)
AbsArchive_swigregister = _npstat.AbsArchive_swigregister
AbsArchive_swigregister(AbsArchive)

class BinaryArchiveBase(AbsArchive):
    __swig_setmethods__ = {}
    for _s in [AbsArchive]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinaryArchiveBase, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsArchive]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinaryArchiveBase, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _npstat.delete_BinaryArchiveBase
    __del__ = lambda self : None;
    def isOpen(self): return _npstat.BinaryArchiveBase_isOpen(self)
    def isReadable(self): return _npstat.BinaryArchiveBase_isReadable(self)
    def isWritable(self): return _npstat.BinaryArchiveBase_isWritable(self)
    def error(self): return _npstat.BinaryArchiveBase_error(self)
    def modeValid(self): return _npstat.BinaryArchiveBase_modeValid(self)
    def size(self): return _npstat.BinaryArchiveBase_size(self)
    def smallestId(self): return _npstat.BinaryArchiveBase_smallestId(self)
    def largestId(self): return _npstat.BinaryArchiveBase_largestId(self)
    def idsAreContiguous(self): return _npstat.BinaryArchiveBase_idsAreContiguous(self)
    def itemExists(self, *args): return _npstat.BinaryArchiveBase_itemExists(self, *args)
    def itemSearch(self, *args): return _npstat.BinaryArchiveBase_itemSearch(self, *args)
    def compressionBufferSize(self): return _npstat.BinaryArchiveBase_compressionBufferSize(self)
    def compressionLevel(self): return _npstat.BinaryArchiveBase_compressionLevel(self)
    def minSizeToCompress(self): return _npstat.BinaryArchiveBase_minSizeToCompress(self)
    def injectMetadata(self): return _npstat.BinaryArchiveBase_injectMetadata(self)
    __swig_getmethods__["isEmptyFile"] = lambda x: _npstat.BinaryArchiveBase_isEmptyFile
    if _newclass:isEmptyFile = staticmethod(_npstat.BinaryArchiveBase_isEmptyFile)
    def compression(self): return _npstat.BinaryArchiveBase_compression(self)
BinaryArchiveBase_swigregister = _npstat.BinaryArchiveBase_swigregister
BinaryArchiveBase_swigregister(BinaryArchiveBase)

def BinaryArchiveBase_isEmptyFile(*args):
  return _npstat.BinaryArchiveBase_isEmptyFile(*args)
BinaryArchiveBase_isEmptyFile = _npstat.BinaryArchiveBase_isEmptyFile

class StringArchive(AbsArchive):
    __swig_setmethods__ = {}
    for _s in [AbsArchive]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringArchive, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsArchive]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StringArchive, name)
    __repr__ = _swig_repr
    def __init__(self, name=None): 
        this = _npstat.new_StringArchive(name)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_StringArchive
    __del__ = lambda self : None;
    def isOpen(self): return _npstat.StringArchive_isOpen(self)
    def error(self): return _npstat.StringArchive_error(self)
    def isReadable(self): return _npstat.StringArchive_isReadable(self)
    def isWritable(self): return _npstat.StringArchive_isWritable(self)
    def size(self): return _npstat.StringArchive_size(self)
    def smallestId(self): return _npstat.StringArchive_smallestId(self)
    def largestId(self): return _npstat.StringArchive_largestId(self)
    def idsAreContiguous(self): return _npstat.StringArchive_idsAreContiguous(self)
    def itemExists(self, *args): return _npstat.StringArchive_itemExists(self, *args)
    def itemSearch(self, *args): return _npstat.StringArchive_itemSearch(self, *args)
    def flush(self): return _npstat.StringArchive_flush(self)
    def str(self): return _npstat.StringArchive_str(self)
    def dataSize(self): return _npstat.StringArchive_dataSize(self)
    def classId(self): return _npstat.StringArchive_classId(self)
    def write(self, *args): return _npstat.StringArchive_write(self, *args)
    __swig_getmethods__["classname"] = lambda x: _npstat.StringArchive_classname
    if _newclass:classname = staticmethod(_npstat.StringArchive_classname)
    __swig_getmethods__["version"] = lambda x: _npstat.StringArchive_version
    if _newclass:version = staticmethod(_npstat.StringArchive_version)
    __swig_getmethods__["read"] = lambda x: _npstat.StringArchive_read
    if _newclass:read = staticmethod(_npstat.StringArchive_read)
StringArchive_swigregister = _npstat.StringArchive_swigregister
StringArchive_swigregister(StringArchive)

def StringArchive_classname():
  return _npstat.StringArchive_classname()
StringArchive_classname = _npstat.StringArchive_classname

def StringArchive_version():
  return _npstat.StringArchive_version()
StringArchive_version = _npstat.StringArchive_version

def StringArchive_read(*args):
  return _npstat.StringArchive_read(*args)
StringArchive_read = _npstat.StringArchive_read

class ArchiveRecord_StringArchive(AbsRecord):
    __swig_setmethods__ = {}
    for _s in [AbsRecord]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArchiveRecord_StringArchive, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsRecord]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArchiveRecord_StringArchive, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_ArchiveRecord_StringArchive(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_ArchiveRecord_StringArchive
    __del__ = lambda self : None;
ArchiveRecord_StringArchive_swigregister = _npstat.ArchiveRecord_StringArchive_swigregister
ArchiveRecord_StringArchive_swigregister(ArchiveRecord_StringArchive)


def NPRecord(*args):
  return _npstat.NPRecord(*args)
NPRecord = _npstat.NPRecord

def writeStringArchive(*args):
  return _npstat.writeStringArchive(*args)
writeStringArchive = _npstat.writeStringArchive

def readStringArchive(*args):
  return _npstat.readStringArchive(*args)
readStringArchive = _npstat.readStringArchive

def writeCompressedStringArchive(*args):
  return _npstat.writeCompressedStringArchive(*args)
writeCompressedStringArchive = _npstat.writeCompressedStringArchive

def readCompressedStringArchive(*args):
  return _npstat.readCompressedStringArchive(*args)
readCompressedStringArchive = _npstat.readCompressedStringArchive

def writeCompressedStringArchiveExt(*args):
  return _npstat.writeCompressedStringArchiveExt(*args)
writeCompressedStringArchiveExt = _npstat.writeCompressedStringArchiveExt

def readCompressedStringArchiveExt(*args):
  return _npstat.readCompressedStringArchiveExt(*args)
readCompressedStringArchiveExt = _npstat.readCompressedStringArchiveExt

def loadStringArchiveFromArchive(*args):
  return _npstat.loadStringArchiveFromArchive(*args)
loadStringArchiveFromArchive = _npstat.loadStringArchiveFromArchive
class ArchiveValueRecord_Bool(AbsRecord):
    __swig_setmethods__ = {}
    for _s in [AbsRecord]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArchiveValueRecord_Bool, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsRecord]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArchiveValueRecord_Bool, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_ArchiveValueRecord_Bool(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_ArchiveValueRecord_Bool
    __del__ = lambda self : None;
ArchiveValueRecord_Bool_swigregister = _npstat.ArchiveValueRecord_Bool_swigregister
ArchiveValueRecord_Bool_swigregister(ArchiveValueRecord_Bool)


def NPValueRecord_Bool(*args):
  return _npstat.NPValueRecord_Bool(*args)
NPValueRecord_Bool = _npstat.NPValueRecord_Bool
class Ref_Bool(AbsReference):
    __swig_setmethods__ = {}
    for _s in [AbsReference]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ref_Bool, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsReference]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ref_Bool, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_Ref_Bool(*args)
        try: self.this.append(this)
        except: self.this = this
    def restore(self, *args): return _npstat.Ref_Bool_restore(self, *args)
    def retrieve(self, *args): return _npstat.Ref_Bool_retrieve(self, *args)
    def getValue(self, *args): return _npstat.Ref_Bool_getValue(self, *args)
    __swig_destroy__ = _npstat.delete_Ref_Bool
    __del__ = lambda self : None;
Ref_Bool_swigregister = _npstat.Ref_Bool_swigregister
Ref_Bool_swigregister(Ref_Bool)

class ArchiveValueRecord_Char(AbsRecord):
    __swig_setmethods__ = {}
    for _s in [AbsRecord]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArchiveValueRecord_Char, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsRecord]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArchiveValueRecord_Char, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_ArchiveValueRecord_Char(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_ArchiveValueRecord_Char
    __del__ = lambda self : None;
ArchiveValueRecord_Char_swigregister = _npstat.ArchiveValueRecord_Char_swigregister
ArchiveValueRecord_Char_swigregister(ArchiveValueRecord_Char)


def NPValueRecord_Char(*args):
  return _npstat.NPValueRecord_Char(*args)
NPValueRecord_Char = _npstat.NPValueRecord_Char
class Ref_Char(AbsReference):
    __swig_setmethods__ = {}
    for _s in [AbsReference]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ref_Char, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsReference]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ref_Char, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_Ref_Char(*args)
        try: self.this.append(this)
        except: self.this = this
    def restore(self, *args): return _npstat.Ref_Char_restore(self, *args)
    def retrieve(self, *args): return _npstat.Ref_Char_retrieve(self, *args)
    def getValue(self, *args): return _npstat.Ref_Char_getValue(self, *args)
    __swig_destroy__ = _npstat.delete_Ref_Char
    __del__ = lambda self : None;
Ref_Char_swigregister = _npstat.Ref_Char_swigregister
Ref_Char_swigregister(Ref_Char)

class ArchiveValueRecord_UChar(AbsRecord):
    __swig_setmethods__ = {}
    for _s in [AbsRecord]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArchiveValueRecord_UChar, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsRecord]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArchiveValueRecord_UChar, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_ArchiveValueRecord_UChar(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_ArchiveValueRecord_UChar
    __del__ = lambda self : None;
ArchiveValueRecord_UChar_swigregister = _npstat.ArchiveValueRecord_UChar_swigregister
ArchiveValueRecord_UChar_swigregister(ArchiveValueRecord_UChar)


def NPValueRecord_UChar(*args):
  return _npstat.NPValueRecord_UChar(*args)
NPValueRecord_UChar = _npstat.NPValueRecord_UChar
class Ref_UChar(AbsReference):
    __swig_setmethods__ = {}
    for _s in [AbsReference]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ref_UChar, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsReference]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ref_UChar, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_Ref_UChar(*args)
        try: self.this.append(this)
        except: self.this = this
    def restore(self, *args): return _npstat.Ref_UChar_restore(self, *args)
    def retrieve(self, *args): return _npstat.Ref_UChar_retrieve(self, *args)
    def getValue(self, *args): return _npstat.Ref_UChar_getValue(self, *args)
    __swig_destroy__ = _npstat.delete_Ref_UChar
    __del__ = lambda self : None;
Ref_UChar_swigregister = _npstat.Ref_UChar_swigregister
Ref_UChar_swigregister(Ref_UChar)

class ArchiveValueRecord_SChar(AbsRecord):
    __swig_setmethods__ = {}
    for _s in [AbsRecord]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArchiveValueRecord_SChar, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsRecord]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArchiveValueRecord_SChar, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_ArchiveValueRecord_SChar(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_ArchiveValueRecord_SChar
    __del__ = lambda self : None;
ArchiveValueRecord_SChar_swigregister = _npstat.ArchiveValueRecord_SChar_swigregister
ArchiveValueRecord_SChar_swigregister(ArchiveValueRecord_SChar)


def NPValueRecord_SChar(*args):
  return _npstat.NPValueRecord_SChar(*args)
NPValueRecord_SChar = _npstat.NPValueRecord_SChar
class Ref_SChar(AbsReference):
    __swig_setmethods__ = {}
    for _s in [AbsReference]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ref_SChar, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsReference]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ref_SChar, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_Ref_SChar(*args)
        try: self.this.append(this)
        except: self.this = this
    def restore(self, *args): return _npstat.Ref_SChar_restore(self, *args)
    def retrieve(self, *args): return _npstat.Ref_SChar_retrieve(self, *args)
    def getValue(self, *args): return _npstat.Ref_SChar_getValue(self, *args)
    __swig_destroy__ = _npstat.delete_Ref_SChar
    __del__ = lambda self : None;
Ref_SChar_swigregister = _npstat.Ref_SChar_swigregister
Ref_SChar_swigregister(Ref_SChar)

class ArchiveValueRecord_Short(AbsRecord):
    __swig_setmethods__ = {}
    for _s in [AbsRecord]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArchiveValueRecord_Short, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsRecord]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArchiveValueRecord_Short, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_ArchiveValueRecord_Short(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_ArchiveValueRecord_Short
    __del__ = lambda self : None;
ArchiveValueRecord_Short_swigregister = _npstat.ArchiveValueRecord_Short_swigregister
ArchiveValueRecord_Short_swigregister(ArchiveValueRecord_Short)


def NPValueRecord_Short(*args):
  return _npstat.NPValueRecord_Short(*args)
NPValueRecord_Short = _npstat.NPValueRecord_Short
class Ref_Short(AbsReference):
    __swig_setmethods__ = {}
    for _s in [AbsReference]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ref_Short, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsReference]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ref_Short, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_Ref_Short(*args)
        try: self.this.append(this)
        except: self.this = this
    def restore(self, *args): return _npstat.Ref_Short_restore(self, *args)
    def retrieve(self, *args): return _npstat.Ref_Short_retrieve(self, *args)
    def getValue(self, *args): return _npstat.Ref_Short_getValue(self, *args)
    __swig_destroy__ = _npstat.delete_Ref_Short
    __del__ = lambda self : None;
Ref_Short_swigregister = _npstat.Ref_Short_swigregister
Ref_Short_swigregister(Ref_Short)

class ArchiveValueRecord_UShort(AbsRecord):
    __swig_setmethods__ = {}
    for _s in [AbsRecord]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArchiveValueRecord_UShort, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsRecord]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArchiveValueRecord_UShort, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_ArchiveValueRecord_UShort(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_ArchiveValueRecord_UShort
    __del__ = lambda self : None;
ArchiveValueRecord_UShort_swigregister = _npstat.ArchiveValueRecord_UShort_swigregister
ArchiveValueRecord_UShort_swigregister(ArchiveValueRecord_UShort)


def NPValueRecord_UShort(*args):
  return _npstat.NPValueRecord_UShort(*args)
NPValueRecord_UShort = _npstat.NPValueRecord_UShort
class Ref_UShort(AbsReference):
    __swig_setmethods__ = {}
    for _s in [AbsReference]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ref_UShort, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsReference]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ref_UShort, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_Ref_UShort(*args)
        try: self.this.append(this)
        except: self.this = this
    def restore(self, *args): return _npstat.Ref_UShort_restore(self, *args)
    def retrieve(self, *args): return _npstat.Ref_UShort_retrieve(self, *args)
    def getValue(self, *args): return _npstat.Ref_UShort_getValue(self, *args)
    __swig_destroy__ = _npstat.delete_Ref_UShort
    __del__ = lambda self : None;
Ref_UShort_swigregister = _npstat.Ref_UShort_swigregister
Ref_UShort_swigregister(Ref_UShort)

class ArchiveValueRecord_Int(AbsRecord):
    __swig_setmethods__ = {}
    for _s in [AbsRecord]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArchiveValueRecord_Int, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsRecord]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArchiveValueRecord_Int, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_ArchiveValueRecord_Int(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_ArchiveValueRecord_Int
    __del__ = lambda self : None;
ArchiveValueRecord_Int_swigregister = _npstat.ArchiveValueRecord_Int_swigregister
ArchiveValueRecord_Int_swigregister(ArchiveValueRecord_Int)


def NPValueRecord_Int(*args):
  return _npstat.NPValueRecord_Int(*args)
NPValueRecord_Int = _npstat.NPValueRecord_Int
class Ref_Int(AbsReference):
    __swig_setmethods__ = {}
    for _s in [AbsReference]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ref_Int, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsReference]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ref_Int, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_Ref_Int(*args)
        try: self.this.append(this)
        except: self.this = this
    def restore(self, *args): return _npstat.Ref_Int_restore(self, *args)
    def retrieve(self, *args): return _npstat.Ref_Int_retrieve(self, *args)
    def getValue(self, *args): return _npstat.Ref_Int_getValue(self, *args)
    __swig_destroy__ = _npstat.delete_Ref_Int
    __del__ = lambda self : None;
Ref_Int_swigregister = _npstat.Ref_Int_swigregister
Ref_Int_swigregister(Ref_Int)

class ArchiveValueRecord_Long(AbsRecord):
    __swig_setmethods__ = {}
    for _s in [AbsRecord]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArchiveValueRecord_Long, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsRecord]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArchiveValueRecord_Long, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_ArchiveValueRecord_Long(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_ArchiveValueRecord_Long
    __del__ = lambda self : None;
ArchiveValueRecord_Long_swigregister = _npstat.ArchiveValueRecord_Long_swigregister
ArchiveValueRecord_Long_swigregister(ArchiveValueRecord_Long)


def NPValueRecord_Long(*args):
  return _npstat.NPValueRecord_Long(*args)
NPValueRecord_Long = _npstat.NPValueRecord_Long
class Ref_Long(AbsReference):
    __swig_setmethods__ = {}
    for _s in [AbsReference]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ref_Long, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsReference]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ref_Long, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_Ref_Long(*args)
        try: self.this.append(this)
        except: self.this = this
    def restore(self, *args): return _npstat.Ref_Long_restore(self, *args)
    def retrieve(self, *args): return _npstat.Ref_Long_retrieve(self, *args)
    def getValue(self, *args): return _npstat.Ref_Long_getValue(self, *args)
    __swig_destroy__ = _npstat.delete_Ref_Long
    __del__ = lambda self : None;
Ref_Long_swigregister = _npstat.Ref_Long_swigregister
Ref_Long_swigregister(Ref_Long)

class ArchiveValueRecord_LLong(AbsRecord):
    __swig_setmethods__ = {}
    for _s in [AbsRecord]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArchiveValueRecord_LLong, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsRecord]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArchiveValueRecord_LLong, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_ArchiveValueRecord_LLong(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_ArchiveValueRecord_LLong
    __del__ = lambda self : None;
ArchiveValueRecord_LLong_swigregister = _npstat.ArchiveValueRecord_LLong_swigregister
ArchiveValueRecord_LLong_swigregister(ArchiveValueRecord_LLong)


def NPValueRecord_LLong(*args):
  return _npstat.NPValueRecord_LLong(*args)
NPValueRecord_LLong = _npstat.NPValueRecord_LLong
class Ref_LLong(AbsReference):
    __swig_setmethods__ = {}
    for _s in [AbsReference]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ref_LLong, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsReference]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ref_LLong, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_Ref_LLong(*args)
        try: self.this.append(this)
        except: self.this = this
    def restore(self, *args): return _npstat.Ref_LLong_restore(self, *args)
    def retrieve(self, *args): return _npstat.Ref_LLong_retrieve(self, *args)
    def getValue(self, *args): return _npstat.Ref_LLong_getValue(self, *args)
    __swig_destroy__ = _npstat.delete_Ref_LLong
    __del__ = lambda self : None;
Ref_LLong_swigregister = _npstat.Ref_LLong_swigregister
Ref_LLong_swigregister(Ref_LLong)

class ArchiveValueRecord_UInt(AbsRecord):
    __swig_setmethods__ = {}
    for _s in [AbsRecord]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArchiveValueRecord_UInt, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsRecord]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArchiveValueRecord_UInt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_ArchiveValueRecord_UInt(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_ArchiveValueRecord_UInt
    __del__ = lambda self : None;
ArchiveValueRecord_UInt_swigregister = _npstat.ArchiveValueRecord_UInt_swigregister
ArchiveValueRecord_UInt_swigregister(ArchiveValueRecord_UInt)


def NPValueRecord_UInt(*args):
  return _npstat.NPValueRecord_UInt(*args)
NPValueRecord_UInt = _npstat.NPValueRecord_UInt
class Ref_UInt(AbsReference):
    __swig_setmethods__ = {}
    for _s in [AbsReference]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ref_UInt, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsReference]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ref_UInt, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_Ref_UInt(*args)
        try: self.this.append(this)
        except: self.this = this
    def restore(self, *args): return _npstat.Ref_UInt_restore(self, *args)
    def retrieve(self, *args): return _npstat.Ref_UInt_retrieve(self, *args)
    def getValue(self, *args): return _npstat.Ref_UInt_getValue(self, *args)
    __swig_destroy__ = _npstat.delete_Ref_UInt
    __del__ = lambda self : None;
Ref_UInt_swigregister = _npstat.Ref_UInt_swigregister
Ref_UInt_swigregister(Ref_UInt)

class ArchiveValueRecord_ULong(AbsRecord):
    __swig_setmethods__ = {}
    for _s in [AbsRecord]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArchiveValueRecord_ULong, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsRecord]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArchiveValueRecord_ULong, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_ArchiveValueRecord_ULong(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_ArchiveValueRecord_ULong
    __del__ = lambda self : None;
ArchiveValueRecord_ULong_swigregister = _npstat.ArchiveValueRecord_ULong_swigregister
ArchiveValueRecord_ULong_swigregister(ArchiveValueRecord_ULong)


def NPValueRecord_ULong(*args):
  return _npstat.NPValueRecord_ULong(*args)
NPValueRecord_ULong = _npstat.NPValueRecord_ULong
class Ref_ULong(AbsReference):
    __swig_setmethods__ = {}
    for _s in [AbsReference]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ref_ULong, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsReference]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ref_ULong, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_Ref_ULong(*args)
        try: self.this.append(this)
        except: self.this = this
    def restore(self, *args): return _npstat.Ref_ULong_restore(self, *args)
    def retrieve(self, *args): return _npstat.Ref_ULong_retrieve(self, *args)
    def getValue(self, *args): return _npstat.Ref_ULong_getValue(self, *args)
    __swig_destroy__ = _npstat.delete_Ref_ULong
    __del__ = lambda self : None;
Ref_ULong_swigregister = _npstat.Ref_ULong_swigregister
Ref_ULong_swigregister(Ref_ULong)

class ArchiveValueRecord_ULLong(AbsRecord):
    __swig_setmethods__ = {}
    for _s in [AbsRecord]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArchiveValueRecord_ULLong, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsRecord]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArchiveValueRecord_ULLong, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_ArchiveValueRecord_ULLong(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_ArchiveValueRecord_ULLong
    __del__ = lambda self : None;
ArchiveValueRecord_ULLong_swigregister = _npstat.ArchiveValueRecord_ULLong_swigregister
ArchiveValueRecord_ULLong_swigregister(ArchiveValueRecord_ULLong)


def NPValueRecord_ULLong(*args):
  return _npstat.NPValueRecord_ULLong(*args)
NPValueRecord_ULLong = _npstat.NPValueRecord_ULLong
class Ref_ULLong(AbsReference):
    __swig_setmethods__ = {}
    for _s in [AbsReference]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ref_ULLong, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsReference]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ref_ULLong, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_Ref_ULLong(*args)
        try: self.this.append(this)
        except: self.this = this
    def restore(self, *args): return _npstat.Ref_ULLong_restore(self, *args)
    def retrieve(self, *args): return _npstat.Ref_ULLong_retrieve(self, *args)
    def getValue(self, *args): return _npstat.Ref_ULLong_getValue(self, *args)
    __swig_destroy__ = _npstat.delete_Ref_ULLong
    __del__ = lambda self : None;
Ref_ULLong_swigregister = _npstat.Ref_ULLong_swigregister
Ref_ULLong_swigregister(Ref_ULLong)

class ArchiveValueRecord_Float(AbsRecord):
    __swig_setmethods__ = {}
    for _s in [AbsRecord]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArchiveValueRecord_Float, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsRecord]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArchiveValueRecord_Float, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_ArchiveValueRecord_Float(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_ArchiveValueRecord_Float
    __del__ = lambda self : None;
ArchiveValueRecord_Float_swigregister = _npstat.ArchiveValueRecord_Float_swigregister
ArchiveValueRecord_Float_swigregister(ArchiveValueRecord_Float)


def NPValueRecord_Float(*args):
  return _npstat.NPValueRecord_Float(*args)
NPValueRecord_Float = _npstat.NPValueRecord_Float
class Ref_Float(AbsReference):
    __swig_setmethods__ = {}
    for _s in [AbsReference]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ref_Float, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsReference]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ref_Float, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_Ref_Float(*args)
        try: self.this.append(this)
        except: self.this = this
    def restore(self, *args): return _npstat.Ref_Float_restore(self, *args)
    def retrieve(self, *args): return _npstat.Ref_Float_retrieve(self, *args)
    def getValue(self, *args): return _npstat.Ref_Float_getValue(self, *args)
    __swig_destroy__ = _npstat.delete_Ref_Float
    __del__ = lambda self : None;
Ref_Float_swigregister = _npstat.Ref_Float_swigregister
Ref_Float_swigregister(Ref_Float)

class ArchiveValueRecord_Double(AbsRecord):
    __swig_setmethods__ = {}
    for _s in [AbsRecord]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArchiveValueRecord_Double, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsRecord]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArchiveValueRecord_Double, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_ArchiveValueRecord_Double(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_ArchiveValueRecord_Double
    __del__ = lambda self : None;
ArchiveValueRecord_Double_swigregister = _npstat.ArchiveValueRecord_Double_swigregister
ArchiveValueRecord_Double_swigregister(ArchiveValueRecord_Double)


def NPValueRecord_Double(*args):
  return _npstat.NPValueRecord_Double(*args)
NPValueRecord_Double = _npstat.NPValueRecord_Double
class Ref_Double(AbsReference):
    __swig_setmethods__ = {}
    for _s in [AbsReference]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ref_Double, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsReference]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ref_Double, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_Ref_Double(*args)
        try: self.this.append(this)
        except: self.this = this
    def restore(self, *args): return _npstat.Ref_Double_restore(self, *args)
    def retrieve(self, *args): return _npstat.Ref_Double_retrieve(self, *args)
    def getValue(self, *args): return _npstat.Ref_Double_getValue(self, *args)
    __swig_destroy__ = _npstat.delete_Ref_Double
    __del__ = lambda self : None;
Ref_Double_swigregister = _npstat.Ref_Double_swigregister
Ref_Double_swigregister(Ref_Double)

class ArchiveValueRecord_LDouble(AbsRecord):
    __swig_setmethods__ = {}
    for _s in [AbsRecord]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArchiveValueRecord_LDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsRecord]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArchiveValueRecord_LDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_ArchiveValueRecord_LDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_ArchiveValueRecord_LDouble
    __del__ = lambda self : None;
ArchiveValueRecord_LDouble_swigregister = _npstat.ArchiveValueRecord_LDouble_swigregister
ArchiveValueRecord_LDouble_swigregister(ArchiveValueRecord_LDouble)


def NPValueRecord_LDouble(*args):
  return _npstat.NPValueRecord_LDouble(*args)
NPValueRecord_LDouble = _npstat.NPValueRecord_LDouble
class Ref_LDouble(AbsReference):
    __swig_setmethods__ = {}
    for _s in [AbsReference]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ref_LDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsReference]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ref_LDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_Ref_LDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def restore(self, *args): return _npstat.Ref_LDouble_restore(self, *args)
    def retrieve(self, *args): return _npstat.Ref_LDouble_retrieve(self, *args)
    def getValue(self, *args): return _npstat.Ref_LDouble_getValue(self, *args)
    __swig_destroy__ = _npstat.delete_Ref_LDouble
    __del__ = lambda self : None;
Ref_LDouble_swigregister = _npstat.Ref_LDouble_swigregister
Ref_LDouble_swigregister(Ref_LDouble)

class ArchiveValueRecord_CFloat(AbsRecord):
    __swig_setmethods__ = {}
    for _s in [AbsRecord]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArchiveValueRecord_CFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsRecord]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArchiveValueRecord_CFloat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_ArchiveValueRecord_CFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_ArchiveValueRecord_CFloat
    __del__ = lambda self : None;
ArchiveValueRecord_CFloat_swigregister = _npstat.ArchiveValueRecord_CFloat_swigregister
ArchiveValueRecord_CFloat_swigregister(ArchiveValueRecord_CFloat)


def NPValueRecord_CFloat(*args):
  return _npstat.NPValueRecord_CFloat(*args)
NPValueRecord_CFloat = _npstat.NPValueRecord_CFloat
class Ref_CFloat(AbsReference):
    __swig_setmethods__ = {}
    for _s in [AbsReference]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ref_CFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsReference]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ref_CFloat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_Ref_CFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    def restore(self, *args): return _npstat.Ref_CFloat_restore(self, *args)
    def retrieve(self, *args): return _npstat.Ref_CFloat_retrieve(self, *args)
    def getValue(self, *args): return _npstat.Ref_CFloat_getValue(self, *args)
    __swig_destroy__ = _npstat.delete_Ref_CFloat
    __del__ = lambda self : None;
Ref_CFloat_swigregister = _npstat.Ref_CFloat_swigregister
Ref_CFloat_swigregister(Ref_CFloat)

class ArchiveValueRecord_CDouble(AbsRecord):
    __swig_setmethods__ = {}
    for _s in [AbsRecord]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArchiveValueRecord_CDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsRecord]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArchiveValueRecord_CDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_ArchiveValueRecord_CDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_ArchiveValueRecord_CDouble
    __del__ = lambda self : None;
ArchiveValueRecord_CDouble_swigregister = _npstat.ArchiveValueRecord_CDouble_swigregister
ArchiveValueRecord_CDouble_swigregister(ArchiveValueRecord_CDouble)


def NPValueRecord_CDouble(*args):
  return _npstat.NPValueRecord_CDouble(*args)
NPValueRecord_CDouble = _npstat.NPValueRecord_CDouble
class Ref_CDouble(AbsReference):
    __swig_setmethods__ = {}
    for _s in [AbsReference]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ref_CDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsReference]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ref_CDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_Ref_CDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def restore(self, *args): return _npstat.Ref_CDouble_restore(self, *args)
    def retrieve(self, *args): return _npstat.Ref_CDouble_retrieve(self, *args)
    def getValue(self, *args): return _npstat.Ref_CDouble_getValue(self, *args)
    __swig_destroy__ = _npstat.delete_Ref_CDouble
    __del__ = lambda self : None;
Ref_CDouble_swigregister = _npstat.Ref_CDouble_swigregister
Ref_CDouble_swigregister(Ref_CDouble)

class ArchiveValueRecord_CLDouble(AbsRecord):
    __swig_setmethods__ = {}
    for _s in [AbsRecord]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArchiveValueRecord_CLDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsRecord]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArchiveValueRecord_CLDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_ArchiveValueRecord_CLDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_ArchiveValueRecord_CLDouble
    __del__ = lambda self : None;
ArchiveValueRecord_CLDouble_swigregister = _npstat.ArchiveValueRecord_CLDouble_swigregister
ArchiveValueRecord_CLDouble_swigregister(ArchiveValueRecord_CLDouble)


def NPValueRecord_CLDouble(*args):
  return _npstat.NPValueRecord_CLDouble(*args)
NPValueRecord_CLDouble = _npstat.NPValueRecord_CLDouble
class Ref_CLDouble(AbsReference):
    __swig_setmethods__ = {}
    for _s in [AbsReference]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ref_CLDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsReference]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ref_CLDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_Ref_CLDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def restore(self, *args): return _npstat.Ref_CLDouble_restore(self, *args)
    def retrieve(self, *args): return _npstat.Ref_CLDouble_retrieve(self, *args)
    def getValue(self, *args): return _npstat.Ref_CLDouble_getValue(self, *args)
    __swig_destroy__ = _npstat.delete_Ref_CLDouble
    __del__ = lambda self : None;
Ref_CLDouble_swigregister = _npstat.Ref_CLDouble_swigregister
Ref_CLDouble_swigregister(Ref_CLDouble)

class ArchiveValueRecord_String(AbsRecord):
    __swig_setmethods__ = {}
    for _s in [AbsRecord]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ArchiveValueRecord_String, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsRecord]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ArchiveValueRecord_String, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_ArchiveValueRecord_String(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_ArchiveValueRecord_String
    __del__ = lambda self : None;
ArchiveValueRecord_String_swigregister = _npstat.ArchiveValueRecord_String_swigregister
ArchiveValueRecord_String_swigregister(ArchiveValueRecord_String)


def NPValueRecord_String(*args):
  return _npstat.NPValueRecord_String(*args)
NPValueRecord_String = _npstat.NPValueRecord_String
class Ref_String(AbsReference):
    __swig_setmethods__ = {}
    for _s in [AbsReference]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ref_String, name, value)
    __swig_getmethods__ = {}
    for _s in [AbsReference]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Ref_String, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_Ref_String(*args)
        try: self.this.append(this)
        except: self.this = this
    def restore(self, *args): return _npstat.Ref_String_restore(self, *args)
    def retrieve(self, *args): return _npstat.Ref_String_retrieve(self, *args)
    def getValue(self, *args): return _npstat.Ref_String_getValue(self, *args)
    __swig_destroy__ = _npstat.delete_Ref_String
    __del__ = lambda self : None;
Ref_String_swigregister = _npstat.Ref_String_swigregister
Ref_String_swigregister(Ref_String)

class BinaryFileArchive(BinaryArchiveBase):
    __swig_setmethods__ = {}
    for _s in [BinaryArchiveBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, BinaryFileArchive, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryArchiveBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, BinaryFileArchive, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_BinaryFileArchive(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_BinaryFileArchive
    __del__ = lambda self : None;
    def flush(self): return _npstat.BinaryFileArchive_flush(self)
BinaryFileArchive_swigregister = _npstat.BinaryFileArchive_swigregister
BinaryFileArchive_swigregister(BinaryFileArchive)

class MultiFileArchive(BinaryArchiveBase):
    __swig_setmethods__ = {}
    for _s in [BinaryArchiveBase]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiFileArchive, name, value)
    __swig_getmethods__ = {}
    for _s in [BinaryArchiveBase]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiFileArchive, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _npstat.new_MultiFileArchive(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _npstat.delete_MultiFileArchive
    __del__ = lambda self : None;
    def flush(self): return _npstat.MultiFileArchive_flush(self)
MultiFileArchive_swigregister = _npstat.MultiFileArchive_swigregister
MultiFileArchive_swigregister(MultiFileArchive)

# This file is compatible with both classic and new-style classes.


