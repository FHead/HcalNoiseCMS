#ifndef RootChainProcessor_h_
#define RootChainProcessor_h_

//
// Base class for user-developed TTree analysis classes. Derived classes
// should implement, as a minimum, methods "beginJob", "event", and
// "endJob" which will be called in accordance with their names. Derived
// classes can also implement the methods inherited from the class
// generated by the root "MakeClass" (the most useful methods from
// there are "Cut" and "Notify"). Note that the "Loop" method of the
// root-generated code is no longer used -- it is replaced by the
// "process" method of this class.
//
// I. Volobouev
// March 2013
//

#include <cassert>
#include "TTree.h"

template <class RootMadeClass>
class RootChainProcessor : public RootMadeClass
{
public:
    // Call the constructor with the input chain
    inline RootChainProcessor(TTree *tree, Long64_t maxEvents)
        : RootMadeClass(tree),
          eventCounter_(0),
          processCounter_(0),
          maxEvents_(maxEvents)
    {
        assert(tree);
    }

    virtual ~RootChainProcessor() {}

    // The following function will run the analysis.
    // Just call it after constructing this object.
    // It will return 0 on success, something else
    // on failure (this status is appropriate for
    // returning from "main").
    inline int process()
    {
        int status = this->beginJob();
        eventCounter_ = 0;
        processCounter_ = 0;
        assert(this->fChain);
        const Long64_t nentries = this->fChain->GetEntriesFast();
        for (Long64_t jentry=0; jentry < nentries && !status; ++jentry)
        {
            Long64_t ientry = this->LoadTree(jentry);
            if (ientry < 0) break;
            this->fChain->GetEntry(jentry);
            ++eventCounter_;
            if (this->Cut(ientry) < 0)
                continue;
            status = this->event(ientry);
            if (++processCounter_ >= maxEvents_)
                break;
        }
        const int endStatus = this->endJob();
        if (status)
            return status;
        else
            return endStatus;
    }

    inline Long64_t getEventCounter() const {return eventCounter_;}
    inline Long64_t getProcessCounter() const {return processCounter_;}

protected:
    // Derived classes should override the following
    // three methods. If these methods return anything
    // other than 0, processing will be stopped.
    virtual int beginJob() = 0;
    virtual int event(Long64_t entryNumber) = 0;
    virtual int endJob() = 0;

private:
    // Disable default constructors and assignment operator
    RootChainProcessor();
    RootChainProcessor(const RootChainProcessor&);
    RootChainProcessor& operator=(const RootChainProcessor&);

    Long64_t eventCounter_;
    Long64_t processCounter_;
    Long64_t maxEvents_;
};

#endif // RootChainProcessor_h_
